<!DOCTYPE html>
<html>
	<head>

					<meta name="viewport" content="width=device-width, initial-scale=1">
	                <script src="/node_modules/jquery/dist/jquery.min.js"></script>
	                <script src="/node_modules/vanilla-image-cropper/dist/js/imagecrop.min.js"></script>
	                <script src="/node_modules/signature_pad/dist/signature_pad.umd.js"></script>
	                <link rel="stylesheet" href="/node_modules/vanilla-image-cropper/dist/css/imagecrop.min.css">
	                <link rel="stylesheet" href="/css/ui-bootstrap.css">
	              	
  

<style>
	body {
		font-family: Arial;
		margin: 0px;
	}
</style>
<style>
	#button-container{
		position: fixed;
		left: 0;
		bottom: 0;
	}
</style>
<style>
	.tab {
  		overflow: hidden;
  		border: 1px solid #ccc;
  		background-color: #f1f1f1;
	}
	.tab button {
		  background-color: inherit;
		  float: left;
		  border: none;
		  outline: none;
		  cursor: pointer;
		  padding: 14px 16px;
		  transition: 0.3s;
		  font-size: 17px;
	}
	.tab button:hover {
	  		background-color: #ddd;
	}
	.tab button.active {
	  		background-color: #ccc;
	}
	.tabcontent {
			height: 380px;
			border-left: 1px solid #ccc;
			border-right: 1px solid #ccc;
			border-bottom: 1px solid #ccc;
		  	display: none;
		  	padding: 5px;
		  	-webkit-animation: fadeEffect 1s;
		  	animation: fadeEffect 1s;
	}
	@-webkit-keyframes fadeEffect {
		  from {opacity: 0;}
		  to {opacity: 1;}
	}
	@keyframes fadeEffect {
		  from {opacity: 0;}
		  to {opacity: 1;}
	}

	#upload-image-editor,#draw-image-editor{
			height: 300px;
			border: 1px dotted #000000;
			text-align: center;
	}
	#draw-image-editor{
			background-color: aliceblue;
			padding-top: 10px;
	}

	
</style>
<style>
	.wrapper {
			  position: relative;
			  width: 300px;
			  height: 100px;
			  -moz-user-select: none;
			  -webkit-user-select: none;
			  -ms-user-select: none;
			  user-select: none;
			  margin: auto;
			  border: 1px solid #000000;

	}
	.signature-pad {
			  position: absolute;
			  left: 0;
			  top: 0;
			  width:300px;
			  height:100px;
			  background-color: white;
	}
</style>
<style>
@media only screen and (max-width:480px) { 
 	.btn {
            padding:10px;
            font-size: x-large;
    }
}
</style>

</head>
<body >
<div class="tab">
	  <button class="tablinks" onclick="switchEditor(event, 'tabcontent-draw-image')"  id="defaultOpen">Draw Image</button>
	  <button class="tablinks" onclick="switchEditor(event, 'tabcontent-upload-image')">Upload Image</button>
</div>
<div id="tabcontent-upload-image" class="tabcontent">
  	<input class="upload-file-input" accept="image/png, image/jpeg" type="file" style="display:none;">
  	<div id="upload-image-editor"></div>
	<div class="button-container" style="text-align: center;">
		<button type="button" id="clear-image" class="btn btn-default">Clear</button>
		<button type="button" id="upload-image" class="btn btn-primary">Choose a file</button>
		<button type="button" id="copy-image" class="btn btn-success">Done</button>
	</div>
</div>
<div id="tabcontent-draw-image" class="tabcontent">
  	<div id="draw-image-editor">
  		<span id="sign-area">Sign In Following Area.</span>
  		<div class="wrapper">
  				<canvas id="signature-pad" class="signature-pad" width="300" height="100"></canvas>
		</div>
  	</div>
  	<div class="button-container" style="text-align: center;">
		<button type="button" id="clear-drawpad"  class="btn btn-default">Clear</button>
		<button type="button" id="copy-drawpad" class="btn btn-success ">Done</button>
  	</div>
</div>

<script type="text/javascript">
	function switchEditor(evt, cityName) {
		  var i, tabcontent, tablinks;
		  tabcontent = document.getElementsByClassName("tabcontent");
		  for (i = 0; i < tabcontent.length; i++) {
		    tabcontent[i].style.display = "none";
		  }
		  tablinks = document.getElementsByClassName("tablinks");
		  for (i = 0; i < tablinks.length; i++) {
		    tablinks[i].className = tablinks[i].className.replace(" active", "");
		  }
		  document.getElementById(cityName).style.display = "block";
		  evt.currentTarget.className += " active";
	}

	function cropImageFromCanvas(imageObject) {
		  var canvas = document.createElement('canvas');
		    canvas.setAttribute("width", imageObject.width);
		    canvas.setAttribute("height", imageObject.height);
		    var ctx = canvas.getContext('2d');
		    ctx.drawImage(imageObject, 0, 0);


		  var w = canvas.width;
		  var h = canvas.height;
		  var pix = {x:[], y:[]};
		  var imageData = ctx.getImageData(0,0,canvas.width,canvas.height);
		  var x=0,y=0,index=0;
		  
		  for (y = 0; y < h; y++) {
		    for (x = 0; x < w; x++) {
		      index = (y * w + x) * 4;
		      if(imageData.data[index+0] > 150 && imageData.data[index+1] > 150 && imageData.data[index+2] > 150){
		      		imageData.data[index+0]=255;
		      		imageData.data[index+1]=255;
		      		imageData.data[index+2]=255;
		      } 
		    }
		  }
		  ctx.putImageData(imageData,0,0);
		  var imageData = ctx.getImageData(0,0,canvas.width,canvas.height);
		  
		  
		  var x=0,y=0,index=0;
		  for (y = 0; y < h; y++) {
		    for (x = 0; x < w; x++) {
		      index = (y * w + x) * 4;
		      if (imageData.data[index+3] > 0) {
		        pix.x.push(x);
		        pix.y.push(y);
		      } 
		    }
		  }
		  pix.x.sort(function(a,b){return a-b});
		  pix.y.sort(function(a,b){return a-b});
		  var n = pix.x.length-1;

		  w = 1 + pix.x[n] - pix.x[0];
		  h = 1 + pix.y[n] - pix.y[0];
		  var cut = ctx.getImageData(pix.x[0], pix.y[0], w, h);

		  canvas.width = w;
		  canvas.height = h;
		  ctx.putImageData(cut, 0, 0);
		  console.log({"width":canvas.width,"height":canvas.height});

		  var payload={"image":canvas.toDataURL(),"width":canvas.width,"height":canvas.height};
		  canvas.remove();
		  return payload;
	}
	
	function removeImageBlanks(imageObject) {
		var imgWidth = imageObject.width;
	    var imgHeight = imageObject.height;
	    var canvas = document.createElement('canvas');
	    canvas.setAttribute("width", imgWidth);
	    canvas.setAttribute("height", imgHeight);
	    var context = canvas.getContext('2d');
	    context.drawImage(imageObject, 0, 0);

	    var imageData = context.getImageData(0, 0, imgWidth, imgHeight),
	        data = imageData.data,
	    getRBG = function(x, y) {
	            var offset = imgWidth * y + x;
	            return {
	                red:     data[offset * 4],
	                green:   data[offset * 4 + 1],
	                blue:    data[offset * 4 + 2],
	                opacity: data[offset * 4 + 3]
	            };
	    },
	    isWhite = function (rgb) {
	            // many images contain noise, as the white is not a pure #fff white
	            return rgb.red > 200 && rgb.green > 200 && rgb.blue > 200;
	    },
	    scanY = function (fromTop) {
	        var offset = fromTop ? 1 : -1;

	        // loop through each row
	        for(var y = fromTop ? 0 : imgHeight - 1; fromTop ? (y < imgHeight) : (y > -1); y += offset) {

	            // loop through each column
	            for(var x = 0; x < imgWidth; x++) {
	                var rgb = getRBG(x, y);
	                if (!isWhite(rgb)) {
	                    if (fromTop) {
	                        return y;
	                    } else {
	                        return Math.min(y + 1, imgHeight);
	                    }
	                }
	            }
	        }
	        return null; // all image is white
	    },
	    scanX = function (fromLeft) {
	        var offset = fromLeft? 1 : -1;

	        // loop through each column
	        for(var x = fromLeft ? 0 : imgWidth - 1; fromLeft ? (x < imgWidth) : (x > -1); x += offset) {

	            // loop through each row
	            for(var y = 0; y < imgHeight; y++) {
	                var rgb = getRBG(x, y);
	                if (!isWhite(rgb)) {
	                    if (fromLeft) {
	                        return x;
	                    } else {
	                        return Math.min(x + 1, imgWidth);
	                    }
	                }      
	            }
	        }
	        return null; // all image is white
	    };
	    var cropTop = scanY(true),
	        cropBottom = scanY(false),
	        cropLeft = scanX(true),
	        cropRight = scanX(false),
	        cropWidth = cropRight - cropLeft,
	        cropHeight = cropBottom - cropTop;

	    canvas.setAttribute("width", cropWidth);
	    canvas.setAttribute("height", cropHeight);
	    canvas.getContext("2d").drawImage(imageObject,cropLeft, cropTop, cropWidth, cropHeight,0, 0, cropWidth, cropHeight);

	    var payload={"image":canvas.toDataURL(),"width":canvas.width,"height":canvas.height};
	    canvas.remove();
	    return payload;
	}

</script>

<script type="text/javascript">
	var imageCropper=false;
	jQuery(document).ready(function($){
		jQuery('#upload-image').click(function(){
				var $this=jQuery(this);
				jQuery('.upload-file-input').trigger('click');
			});
			jQuery('#clear-image').click(function(e){
				if(imageCropper!== false){
					imageCropper.destroy();
					imageCropper=false;
				}
			});
			jQuery('#copy-image').click(function(e){
				/*
				if(imageCropper!== false){
					var payload={};
					payload["image"]=imageCropper.crop('image/png', 1);
					payload["width"]=jQuery("#image-pad .imgc-handles").width();
					payload["height"]=jQuery("#image-pad .imgc-handles").height();
					payload["autofit"]=0;
					payload=JSON.stringify(payload);
					window.parent.postMessage(payload,"*");
				}*/

				var myImage = new Image(jQuery("#image-pad .imgc-handles").width(),jQuery("#image-pad .imgc-handles").height());
					myImage.crossOrigin = "Anonymous";
					myImage.onload = function(){
						var payload = cropImageFromCanvas(myImage); 
						payload["autofit"]=1;
						payload=JSON.stringify(payload);
						window.parent.postMessage(payload,"*");
						myImage.remove();
					}
					myImage.src = imageCropper.crop('image/png', 1);
			});
			//https://www.jqueryscript.net/other/Responsive-Mobile-friendly-Image-Cropper-With-jQuery-rcrop.html
			jQuery('.upload-file-input').change(function(e){
						const reader = new FileReader();
				        reader.onload = e => {
				        	jQuery("#upload-image-editor").html('<div id="image-pad"></div>')
				            imageCropper=new ImageCropper("#image-pad", e.target.result, 
				            	{
				            		//fixed_size : true,
									max_height : 300,
									min_crop_width:120,
									min_crop_height:40,
								}
							);
				        };
				        reader.readAsDataURL(e.target.files[0]);
			});
	});
</script>

<script type="text/javascript">
	var signaturePad=false;

	var url = new URL(document.location);
	if(url.searchParams.get("uitype")=="picture"){
		jQuery('#sign-area').html('Draw your image here.');
	}else{
		jQuery('#sign-area').html('Sign in following area.');
	}

	jQuery(document).ready(function($){

			var url = new URL(document.location);
			var textColor = url.searchParams.get("textcolor");
			if(url.searchParams.get("uitype")=="picture"){
				signaturePad = new SignaturePad(document.getElementById('signature-pad'), {
			  		"backgroundColor": "rgb(255, 255, 255)",
			  		"width": "200px",
	            	"height": "200px",
	            	"penColor": textColor
				});	
			}else{
				signaturePad = new SignaturePad(document.getElementById('signature-pad'), {
			  		"backgroundColor": "rgb(255, 255, 255)",
			  		"width": "300px",
	            	"height": "100px",
	            	"penColor": textColor
				});	
			}	
			
			signaturePad.clear();	
			jQuery('#clear-drawpad').click(function(e){
				if(signaturePad!==false){
			  		signaturePad.clear();
				}
			});
			jQuery('#copy-drawpad').click(function(e){
				if(signaturePad!==false){
					var payload={};
					var myImage = new Image();
					myImage.crossOrigin = "Anonymous";
					myImage.onload = function(){
						var payload = cropImageFromCanvas(myImage); 
						payload["autofit"]=1;
						payload=JSON.stringify(payload);
						window.parent.postMessage(payload,"*");
						myImage.remove();
					}
					myImage.src = signaturePad.toDataURL('image/png');

				}
			});
			function resizeCanvas() {
				var canvas = document.getElementById('signature-pad');
				if(canvas){
				    var ratio =  Math.max(window.devicePixelRatio || 1, 1);
					    canvas.width = canvas.offsetWidth * ratio;
					    canvas.height = canvas.offsetHeight * ratio;
					    canvas.getContext("2d").scale(ratio, ratio);
				}
			}
			window.onresize = resizeCanvas;
			resizeCanvas();		
});	
</script>

<script type="text/javascript">
	document.getElementById("defaultOpen").click();
</script>


</body>
</html>