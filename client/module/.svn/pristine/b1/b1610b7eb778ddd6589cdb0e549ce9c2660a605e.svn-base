<?php

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
set_time_limit(0);
\library('zend.php');
include ROOT . DS . 'library' . DS . 'tcpdf' . DS . 'config' . DS . 'lang' . DS . 'eng.php';
\library('tcpdf/tcpdf.php');
$base = TMP . DS . 'pdfs';
if (!is_dir($base)) {
    mkdir($base);
}
$pdfDocs = array();
$uuid = uuid();
$i = 0;
$css = '';
$uiStyle = \tushar\html::getPath($this->request, 'jquery-ui', 'css');
if (!empty($uiStyle)) $css .= file_get_contents($uiStyle[2]);
$style = \tushar\html::getPath($this->request, 'style', 'css');
if (!empty($style)) $css .= file_get_contents($style[2]);


if (!empty($css)) $css = '<style>' . $css . '</style>';
foreach ($this->get('contract_pages', array()) as $path => $info) {
    $i++;
    $name = $base . DS . $uuid . '-' . $i . '.pdf';
// create new PDF document
    $pdf = new TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);
    $pdf->setPrintFooter(false);
    $pdf->setFooterFont(Array(PDF_FONT_NAME_DATA, '', PDF_FONT_SIZE_DATA));
// set default monospaced font
    $pdf->SetDefaultMonospacedFont(PDF_FONT_MONOSPACED);
//set margins
    $pdf->SetMargins(PDF_MARGIN_LEFT, PDF_MARGIN_TOP, PDF_MARGIN_RIGHT);
    $pdf->SetHeaderMargin(PDF_MARGIN_HEADER);
    $pdf->SetFooterMargin(PDF_MARGIN_FOOTER);
//set auto page breaks
    $pdf->SetAutoPageBreak(TRUE, PDF_MARGIN_BOTTOM);
//set image scale factor
    $pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);
//set some language-dependent strings
    $pdf->setLanguageArray($l);
    // add a page
    $pdf->AddPage();
    if (isset($info['document']) && $info['document'] == true) {
        if (isset($info['id'])) {
            if ($info['mime_type'] == 'application/pdf') {
                $name = APP . DS . $info['storage_path'] . $info['path'];
                $pdfDocs[$name] = false;
            }
        }
    } else {
        $value = $this->generate(TMP . DS . $path, $this->response);
        $tidy = tidy_parse_string($value);
        $value = trim(tidy_get_body($tidy)->value);
        $value = $css . substr($value, 6, -7);
        $pdf->writeHTML($value);
        $pdf->Output($name, 'F');
        $pdfDocs[$name] = true;
    }
    \unlink(TMP . DS . $path);
}

$pdfNew = new \Zend_Pdf();
foreach ($pdfDocs as $file => $isTemp) {
    if (file_exists($file) && is_readable($file)) {
        $pdf = \Zend_Pdf::load($file);
        $extractor = new Zend_Pdf_Resource_Extractor();
        foreach ($pdf->pages as $page) {
            $pdfNew->pages[] = $extractor->clonePage($page);
        }
    }
    if ($isTemp === true) \unlink($file);
}

$mergePdf = $base . DS . $uuid . '.pdf';
$pdfNew->properties['Title'] = $this->data(array('contracts', 'name'));
$pdfNew->properties['Author'] = \tushar\user::read('first_name') . ' ' . \tushar\user::read('last_name');
$pdfNew->save($mergePdf);
$name = $this->data(array('contracts', 'name')) . ".pdf";
//$modelObj=\module\contract_management\model\contract_downloads::getInstance();
$log = array();
$log['related_to'] = $this->data(array('contracts', 'id'));
$log['related_to_model'] = 'contracts';
$log['tmp_name'] = $mergePdf;
$log['name'] = $name;
$log['type'] = 'application/pdf';
$log['error'] = \UPLOAD_ERR_OK;

try {
    //$modelObj->save(array($modelObj->alias=>$log));
} catch (\Exception $e) {
    echo $e->getMessage();
}



header('Content-type:"application/pdf"');
header('Content-Disposition:attachment;filename="' . $name . '"');
header("Pragma: no-cache");
header("Expires: 0");
echo $pdfNew->render();
exit;
?>
