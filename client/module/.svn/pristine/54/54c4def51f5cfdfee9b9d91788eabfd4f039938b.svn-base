[
    {
        "_acl": null,
        "_acl_delete": null,
        "_acl_edit": null,
        "_acl_tmp": null,
        "_acl_tmp_delete": null,
        "_acl_tmp_edit": null,
        "action_id": "96",
        "created": "2014-01-24 15:24:27",
        "created_by": "-1",
        "data_conflict": null,
        "deleted": "0",
        "description": null,
        "else_condition": null,
        "event": null,
        "filter_path": "\/module\/stock\/model\/transfer_orders",
        "id": "52e285ab-6d04-4f27-b88e-2ed90ac22bdf",
        "if_condition": "1",
        "is_commit_pending": "0",
        "is_demo_data": "0",
        "is_public": "1",
        "is_terminal": null,
        "lft": null,
        "md5": null,
        "message_error": null,
        "message_info": null,
        "message_warn": null,
        "modified": "2014-01-24 23:48:17",
        "modified_by": "1",
        "module_id": "27263d19-e746-11e3-aad5-0800275f9930",
        "name": "Issue validation",
        "old_parent_id": null,
        "owned_by": "-2",
        "parent_id": null,
        "record_flags": null,
        "revision": "1",
        "rgt": null,
        "run_once": null,
        "runlevel": "2",
        "stage_id": null,
        "then_condition": "\/\/ if not set, then set draft as current node.\r\n        \/\/  log is empty\r\n        if (!$object->isLogSet()) {\r\n            \/\/  set nodes\r\n            $object->setWorkflowLog(array(array('can_edit' => 1, 'foreign_key' => \\tushar\\user::read('id'), 'foreign_key_model' => 'users')));\r\n        }\r\n        \/\/  then set draft as current node.->invoke enter event for current stage\r\n        $node = $object->node($object->nodeID());\r\n        \/\/ check if node is valid and exists in log.\r\n$data = $object->data['entity'];\r\nif (array_key_exists(\"stock_moves\", $data)) {\r\n    $count = 0;\r\n    foreach ($data['stock_moves'] as $key => $value) {\r\n        if (!isset($value['deleted']) || (isset($value['deleted']) && $value['deleted'] != '1')) {\r\n            $count+=1;\r\n        }\r\n    }\r\n    if ($count <= '0') {\r\n        throw new \\Exception('Please Enter at least one Order Line');\r\n    } else {\r\n        $object->exitNode();\r\n    }\r\n} else {\r\n    throw new \\Exception('Please Enter at least one Order Line');\r\n}"
    },
    {
        "_acl": null,
        "_acl_delete": null,
        "_acl_edit": null,
        "_acl_tmp": null,
        "_acl_tmp_delete": null,
        "_acl_tmp_edit": null,
        "action_id": "97",
        "created": "2014-01-24 15:33:29",
        "created_by": "-1",
        "data_conflict": null,
        "deleted": "0",
        "description": null,
        "else_condition": null,
        "event": null,
        "filter_path": "\/module\/stock\/model\/transfer_orders",
        "id": "52e287c9-4d58-48d2-8a2d-32b60ac22bdf",
        "if_condition": "1",
        "is_commit_pending": "0",
        "is_demo_data": "0",
        "is_public": "1",
        "is_terminal": null,
        "lft": null,
        "md5": null,
        "message_error": null,
        "message_info": null,
        "message_warn": null,
        "modified": null,
        "modified_by": null,
        "module_id": "27263d19-e746-11e3-aad5-0800275f9930",
        "name": "Unissue",
        "old_parent_id": null,
        "owned_by": "-2",
        "parent_id": null,
        "record_flags": null,
        "revision": "1",
        "rgt": null,
        "run_once": null,
        "runlevel": "2",
        "stage_id": null,
        "then_condition": "$object->exitNode();"
    },
    {
        "_acl": null,
        "_acl_delete": null,
        "_acl_edit": null,
        "_acl_tmp": null,
        "_acl_tmp_delete": null,
        "_acl_tmp_edit": null,
        "action_id": "98",
        "created": "2014-01-24 15:51:07",
        "created_by": "-1",
        "data_conflict": null,
        "deleted": "0",
        "description": "If type of Transfer Order is Move, the move it Done state and mark related transactions to Done State. Else, create a Delivery Order for that document",
        "else_condition": null,
        "event": null,
        "filter_path": "\/module\/stock\/model\/transfer_orders",
        "id": "52e28beb-ac14-4024-8336-340a0ac22bdf",
        "if_condition": "1",
        "is_commit_pending": "0",
        "is_demo_data": "0",
        "is_public": "1",
        "is_terminal": null,
        "lft": null,
        "md5": null,
        "message_error": null,
        "message_info": null,
        "message_warn": null,
        "modified": "2014-03-25 20:25:13",
        "modified_by": "1",
        "module_id": "27263d19-e746-11e3-aad5-0800275f9930",
        "name": "Process",
        "old_parent_id": null,
        "owned_by": "-2",
        "parent_id": null,
        "record_flags": null,
        "revision": "1",
        "rgt": null,
        "run_once": null,
        "runlevel": "2",
        "stage_id": null,
        "then_condition": "$nodeID = $object->nodeID();\r\n$nextStages=$object->nextMoveToStages($nodeID);\r\n$nextStageList=array();\r\n$toData = $object->data['entity'];\r\n$smObject=\\module\\stock\\model\\stock_moves::getInstance();\r\nforeach ($nextStages as $id=>$stage) {\r\n    $nextStages[$id]['parent_id']=$nodeID; \r\n    if($toData['type'] == 'Move' ){\r\n        if(strcasecmp($stage['name'], 'Pending Shipment') == 0 ){\r\n            $nextStages[$id]['status']='canceled';\r\n            $nextStages[$id]['message'] = 'canceled';\r\n            $nextStageList[$id]=$nextStages[$id];\r\n        }\r\n        $sol = array();\r\n        foreach($toData['stock_moves'] as $line){\r\n           if(!(isset($line['deleted']) && $line['deleted'] == 1)){\r\n              $sol[] = $line[id];\r\n           }\r\n        }\r\n        \\update(array('status'=>'Done'))->{'\\\\module\\\\stock\\\\model\\\\stock_moves'}->where('id',$sol)->execute();\r\n    }elseif (strcasecmp($stage['name'],'Done') == 0 ) {\r\n             $nextStages[$id]['status']='canceled';\r\n             $nextStages[$id]['message'] = 'canceled';\r\n             $nextStageList[$id]=$nextStages[$id];\r\n             \/\/ to generate a DO\r\n             $doObject=\\module\\stock\\model\\delivery_orders::getInstance();\r\n             $toData['transfer_orders_id']=$toData['id'];\r\n             $toData['effective_from']=date(\"Y-m-d\");\r\n             $toData['effective_to']=$toData['fulfillment_date'];\r\n             $toData['frieght_terms_id']=$toData['shipping_type_id'];\r\n             $toData=array_diff_key($toData,\r\n             array($doObject->primaryKey=>1,\r\n                   'status'=>1,\r\n                   '_acl'=>1,\r\n                   '_acl_edit'=>1,\r\n                   '_acl_delete'=>1));\r\n             if(isset($toData['stock_moves']) && is_array($toData['stock_moves'])){\r\n                 $toData['delivery_order_lines']=array();\r\n                 foreach($toData['stock_moves'] as $line){\r\n                     if(!(isset($line['deleted']) && $line['deleted'] == 1)){\r\n                        unset($line['id']);\r\n                        $toData['delivery_order_lines'][]=$line;\r\n                     }\r\n                 }\r\n                 unset($toData['stock_moves']);\r\n             }\r\n             $toData['action'] = array('draft'=>'draft');\r\n             $doObject->save($toData,array('atomic'=>true, 'validate'=>FALSE));\r\n    }       \r\n}\r\n$nextStageList=array_merge($nextStageList,array_diff_key($nextStages,$nextStageList));\r\n$nextNodes=$object->logNextMoveToStages($nextStageList);\r\n$object->exitNode(null,$nextNodes);"
    },
    {
        "_acl": null,
        "_acl_delete": null,
        "_acl_edit": null,
        "_acl_tmp": null,
        "_acl_tmp_delete": null,
        "_acl_tmp_edit": null,
        "action_id": "99",
        "created": "2014-01-24 15:53:49",
        "created_by": "-1",
        "data_conflict": null,
        "deleted": "0",
        "description": null,
        "else_condition": null,
        "event": null,
        "filter_path": "\/module\/stock\/model\/transfer_orders",
        "id": "52e28c8d-1c44-4c0c-9920-323f0ac22bdf",
        "if_condition": "1",
        "is_commit_pending": "0",
        "is_demo_data": "0",
        "is_public": "1",
        "is_terminal": null,
        "lft": null,
        "md5": null,
        "message_error": null,
        "message_info": null,
        "message_warn": null,
        "modified": "2014-04-04 00:12:27",
        "modified_by": "1",
        "module_id": "27263d19-e746-11e3-aad5-0800275f9930",
        "name": "Shipped",
        "old_parent_id": null,
        "owned_by": "-2",
        "parent_id": null,
        "record_flags": null,
        "revision": "1",
        "rgt": null,
        "run_once": null,
        "runlevel": "2",
        "stage_id": null,
        "then_condition": "$dataTO=$object->data['entity'];\r\nif(is_array($dataTO)){\r\n   $do_id = \\select(array('id'))->from('\\\\module\\\\stock\\\\model\\\\delivery_orders')->where('transfer_orders_id',$dataTO['id'])->execute()->fetch(\\PDO::FETCH_COLUMN);\r\n   $doObj = \\module\\stock\\model\\delivery_orders::getInstance(array(), true);\r\n   $doData = current($doObj->read($do_id));\r\n   $doStages = array('Done');\r\n   if (!in_array($doData['workflow_docs']['current_stages'], $doStages)){\r\n    throw new \\Exception(sprintf(__(\"Related Delivery Order \\\"%s\\\" must be Completed to process this Transfer Order.\",\"module\"), $doData['number']));\r\n   }\r\n   $isObject=\\module\\stock\\model\\inbound_shipments::getInstance();\r\n   $dataTO['transfer_orders_id']=$dataTO['id'];\r\n   $dataTO['warehouse_id'] = $dataTO['to_id'];\r\n\r\n  \r\n   $dataTO=array_diff_key($dataTO,\r\n   array($isObject->primaryKey=>1,\r\n   'status'=>1,\r\n   '_acl'=>1,\r\n   '_acl_edit'=>1,\r\n   '_acl_delete'=>1));\r\n   \r\n   \r\n   if(isset($dataTO['stock_moves']) && is_array($dataTO['stock_moves'])){\r\n       $dataTO['config_inbound_shipment_lines']=array();\r\n       foreach($dataTO['stock_moves'] as $line){\r\n           if(!(isset($line['deleted']) && $line['deleted'] == 1)){\r\n              unset($line['id']);\r\n              $dataTO['config_inbound_shipment_lines'][]=$line;\r\n           }\r\n       }\r\n       unset($dataTO['stock_moves']);\r\n   }\r\n   $dataTO['action'] = array('draft'=>'draft');\r\n   $dataTO['order_date'] = date(\"Y-m-d\");\r\n   $dataTO['required_date'] = $dataTO['fulfillment_date'];\r\n\r\n   \r\n   if($isObject->save($dataTO,array('atomic'=>true, 'validate'=>FALSE))) {\r\n       $object->exitNode();\r\n   }\r\n}"
    },
    {
        "_acl": null,
        "_acl_delete": null,
        "_acl_edit": null,
        "_acl_tmp": null,
        "_acl_tmp_delete": null,
        "_acl_tmp_edit": null,
        "action_id": "100",
        "created": "2014-01-24 15:55:57",
        "created_by": "-1",
        "data_conflict": null,
        "deleted": "0",
        "description": null,
        "else_condition": null,
        "event": null,
        "filter_path": "\/module\/stock\/model\/transfer_orders",
        "id": "52e28d0d-fdfc-4cc1-8188-33010ac22bdf",
        "if_condition": "1",
        "is_commit_pending": "0",
        "is_demo_data": "0",
        "is_public": "1",
        "is_terminal": null,
        "lft": null,
        "md5": null,
        "message_error": null,
        "message_info": null,
        "message_warn": null,
        "modified": "2014-04-04 00:13:15",
        "modified_by": "1",
        "module_id": "27263d19-e746-11e3-aad5-0800275f9930",
        "name": "fulfilled",
        "old_parent_id": null,
        "owned_by": "-2",
        "parent_id": null,
        "record_flags": null,
        "revision": "1",
        "rgt": null,
        "run_once": null,
        "runlevel": "2",
        "stage_id": null,
        "then_condition": "$dataTO=$object->data['entity'];\r\nif(is_array($dataTO)){\r\n   $is_id = \\select(array('id'))->from('\\\\module\\\\stock\\\\model\\\\inbound_shipments')->where('transfer_orders_id',$dataTO['id'])->execute()->fetch(\\PDO::FETCH_COLUMN);\r\n   $isObj = \\module\\stock\\model\\inbound_shipments::getInstance(array(), true);\r\n   $isData = current($isObj->read($is_id));\r\n   if (!in_array($isData['workflow_docs']['current_stages'], array('Done'))){\r\n    throw new \\Exception(sprintf(__(\"Related Inbound Shipment with Id \\\"%s\\\" must be in Done state to close this Transfer Order.\",\"module\"), $isData['number']));\r\n   }\r\n   \\update(array('status'=>'Done'))->from('\\\\module\\\\stock\\\\model\\\\stock_moves')\r\n                            ->where(array('related_to' => $dataTO['id']))->where(array('related_to_model' => 'transfer_orders'))->execute();\r\n   $object->exitNode();  \r\n}"
    },
    {
        "_acl": null,
        "_acl_delete": null,
        "_acl_edit": null,
        "_acl_tmp": null,
        "_acl_tmp_delete": null,
        "_acl_tmp_edit": null,
        "action_id": null,
        "created": "2014-03-20 19:40:38",
        "created_by": "-1",
        "data_conflict": null,
        "deleted": "0",
        "description": null,
        "else_condition": null,
        "event": "beforeSave",
        "filter_path": "\/module\/stock\/model\/transfer_orders",
        "id": "532b4436-2854-4ec5-8745-2ae3ac1006a4",
        "if_condition": "1",
        "is_commit_pending": "0",
        "is_demo_data": "0",
        "is_public": "1",
        "is_terminal": null,
        "lft": null,
        "md5": null,
        "message_error": null,
        "message_info": null,
        "message_warn": null,
        "modified": "2014-03-20 19:58:50",
        "modified_by": "1",
        "module_id": "27263d19-e746-11e3-aad5-0800275f9930",
        "name": "Fulfillment Date Transfer Order",
        "old_parent_id": null,
        "owned_by": "-2",
        "parent_id": null,
        "record_flags": null,
        "revision": "1",
        "rgt": null,
        "run_once": null,
        "runlevel": "2",
        "stage_id": null,
        "then_condition": "$Validtill=$object->data;\r\n\r\n\r\nif ((isset($Validtill['order_date']) && isset($Validtill['fulfillment_date']) || (!empty($Validtill['order_date']) && !empty($Validtill['fulfillment_date']))) && $Validtill['order_date']>$Validtill['fulfillment_date']) {\r\nthrow new \\Exception('Fulfillment date should be greater than Order Date');\r\n}\r\n\r\n"
    },
    {
        "_acl": "u-1 ",
        "_acl_delete": "u-1",
        "_acl_edit": "u-1 ",
        "_acl_tmp": null,
        "_acl_tmp_delete": null,
        "_acl_tmp_edit": null,
        "action_id": null,
        "created": "2015-06-19 15:18:52",
        "created_by": "-1",
        "data_conflict": null,
        "deleted": "0",
        "description": null,
        "else_condition": null,
        "event": "beforeSave",
        "filter_path": "\/module\/stock\/model\/transfer_orders",
        "id": "558432dc-e120-4b7f-9ccc-14372017aa44",
        "if_condition": "isset($object->data['from_id']) \r\n&& isset($object->data['to_id']) \r\n&& isset($object->data['type'])",
        "is_commit_pending": "1",
        "is_demo_data": "0",
        "is_public": "0",
        "is_terminal": null,
        "lft": null,
        "md5": null,
        "message_error": null,
        "message_info": null,
        "message_warn": null,
        "modified": "2015-06-19 15:21:20",
        "modified_by": "-1",
        "module_id": null,
        "name": "Validate \"Move\" Type is in same warehouse",
        "old_parent_id": null,
        "owned_by": null,
        "parent_id": null,
        "record_flags": null,
        "revision": "2",
        "rgt": null,
        "run_once": null,
        "runlevel": "5",
        "stage_id": null,
        "then_condition": "if (strcasecmp($object->data['type'], 'Move') == 0 && strcasecmp($object->data['type'], 'Virtual') != 0) {\r\n    if($object->data['to_id'] != $object->data['from_id']){\r\n        throw new \\Exception(__(\"Product can be moved within same warehouse. Select Ship option if producs need to be transfer to different warehouse.\"));\r\n    }\r\n}"
    }
]