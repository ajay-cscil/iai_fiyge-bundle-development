[
    {
        "_acl": null,
        "_acl_delete": null,
        "_acl_edit": null,
        "_acl_tmp": null,
        "_acl_tmp_delete": null,
        "_acl_tmp_edit": null,
        "action_id": "96",
        "created": "2014-01-24 17:52:58",
        "created_by": "-1",
        "data_conflict": null,
        "deleted": "0",
        "description": null,
        "else_condition": null,
        "event": null,
        "filter_path": "\/module\/stock\/model\/inventory",
        "id": "52e2a87a-3a10-469d-99ca-3ee30ac22bdf",
        "if_condition": "1",
        "is_commit_pending": "0",
        "is_demo_data": "0",
        "is_public": "1",
        "is_terminal": null,
        "lft": null,
        "md5": null,
        "message_error": null,
        "message_info": null,
        "message_warn": null,
        "modified": "2014-01-24 23:33:56",
        "modified_by": "1",
        "module_id": "27263d19-e746-11e3-aad5-0800275f9930",
        "name": "Issue Validation Inventory",
        "old_parent_id": null,
        "owned_by": "-2",
        "parent_id": null,
        "record_flags": null,
        "revision": "1",
        "rgt": null,
        "run_once": null,
        "runlevel": "2",
        "stage_id": null,
        "then_condition": "\/\/ if not set, then set draft as current node.\r\n        \/\/  log is empty\r\n        if (!$object->isLogSet()) {\r\n            \/\/  set nodes\r\n            $object->setWorkflowLog(array(array('can_edit' => 1, 'foreign_key' => \\tushar\\user::read('id'), 'foreign_key_model' => 'users')));\r\n        }\r\n        \/\/  then set draft as current node.->invoke enter event for current stage\r\n        $node = $object->node($object->nodeID());\r\n        \/\/ check if node is valid and exists in log.\r\n$data = $object->data['entity'];\r\nif (array_key_exists(\"inventory_lines\", $data)) {\r\n    $count = 0;\r\n    foreach ($data['inventory_lines'] as $key => $value) {\r\n        if (!isset($value['deleted']) || (isset($value['deleted']) && $value['deleted'] != '1')) {\r\n            $count+=1;\r\n        }\r\n    }\r\n    if ($count <= '0') {\r\n\r\n        throw new \\Exception('Please Enter at least one Inventory Line');\r\n    } else {\r\n        $object->exitNode();\r\n    }\r\n} else {\r\n    throw new \\Exception('Please Enter at least one Inventory Line');\r\n}"
    },
    {
        "_acl": null,
        "_acl_delete": null,
        "_acl_edit": null,
        "_acl_tmp": null,
        "_acl_tmp_delete": null,
        "_acl_tmp_edit": null,
        "action_id": "97",
        "created": "2014-01-24 17:56:21",
        "created_by": "-1",
        "data_conflict": null,
        "deleted": "0",
        "description": null,
        "else_condition": null,
        "event": null,
        "filter_path": "\/module\/stock\/model\/inventory",
        "id": "52e2a945-f7d8-4658-9d46-3ee20ac22bdf",
        "if_condition": "1",
        "is_commit_pending": "0",
        "is_demo_data": "0",
        "is_public": "1",
        "is_terminal": null,
        "lft": null,
        "md5": null,
        "message_error": null,
        "message_info": null,
        "message_warn": null,
        "modified": null,
        "modified_by": null,
        "module_id": "27263d19-e746-11e3-aad5-0800275f9930",
        "name": "Unissue Inventory",
        "old_parent_id": null,
        "owned_by": "-2",
        "parent_id": null,
        "record_flags": null,
        "revision": "1",
        "rgt": null,
        "run_once": null,
        "runlevel": "2",
        "stage_id": null,
        "then_condition": "$object->exitNode();"
    },
    {
        "_acl": null,
        "_acl_delete": null,
        "_acl_edit": null,
        "_acl_tmp": null,
        "_acl_tmp_delete": null,
        "_acl_tmp_edit": null,
        "action_id": "94",
        "created": "2014-01-24 18:00:24",
        "created_by": "-1",
        "data_conflict": null,
        "deleted": "0",
        "description": null,
        "else_condition": null,
        "event": null,
        "filter_path": "\/module\/stock\/model\/inventory",
        "id": "52e2aa38-a8f8-4a70-a7b7-3e660ac22bdf",
        "if_condition": "1",
        "is_commit_pending": "0",
        "is_demo_data": "0",
        "is_public": "1",
        "is_terminal": null,
        "lft": "123",
        "md5": null,
        "message_error": null,
        "message_info": null,
        "message_warn": null,
        "modified": "2014-04-04 19:43:43",
        "modified_by": "1",
        "module_id": "27263d19-e746-11e3-aad5-0800275f9930",
        "name": "Validate Inventory",
        "old_parent_id": null,
        "owned_by": "-2",
        "parent_id": null,
        "record_flags": null,
        "revision": "2",
        "rgt": "124",
        "run_once": null,
        "runlevel": "2",
        "stage_id": null,
        "then_condition": "$dataInv = $object->data['entity'];\r\nif (is_array($dataInv)) {\r\n    $smObject = \\module\\stock\\model\\stock_moves::getInstance();\r\n    if (isset($dataInv['inventory_lines']) && is_array($dataInv['inventory_lines'])) {\r\n        foreach ($dataInv['inventory_lines'] as $line) {\r\n            if (!($line['deleted'] == 1)) {\r\n                $smData = array();\r\n                $loc = array();\r\n                $out = \\select(array('stock_moves.source_location_id as location', 'sum(stock_moves.quantity) as quantity', 'location_source.type as type'))\r\n                                ->from('\\\\module\\\\stock\\\\model\\\\stock_moves')\r\n                                ->join('location_source')\r\n                                ->where(array('stock_moves.status' => 'Done',\r\n                                    'stock_moves.product_id' => $line['product_id'],\r\n                                    'stock_moves.source_location_id' => $line['location_id']))\r\n                                ->group(array('stock_moves.product_id', 'stock_moves.source_location_id', 'location_source.type'))\r\n                                ->limit(0)\r\n                                ->inserted()\r\n                                ->execute()->fetchAll(\\PDO::FETCH_ASSOC);\r\n                $inc = \\select(array('stock_moves.destination_location_id as location', 'sum(stock_moves.quantity) as quantity', 'location_destination.type as type'))\r\n                                ->from('\\\\module\\\\stock\\\\model\\\\stock_moves')\r\n                                ->join('location_destination')\r\n                                ->where(array('stock_moves.status' => 'Done',\r\n                                    'stock_moves.product_id' => $line['product_id'],\r\n                                    'stock_moves.destination_location_id' => $line['location_id']))\r\n                                ->group(array('stock_moves.product_id', 'stock_moves.destination_location_id', 'location_destination.type'))\r\n                                ->limit(0)\r\n                                ->inserted()\r\n                                ->execute()->fetchAll(\\PDO::FETCH_ASSOC);\r\n                $qty = 0.0;\r\n                foreach ($inc as $iline) {\r\n                    $qty += floatval($iline['quantity']);\r\n                }\r\n\r\n                foreach ($out as $oline) {\r\n                    $qty -= floatval($oline['quantity']);\r\n                }\r\n            \t\r\n                if ($line['quantity'] > $qty) {\r\n                        $grt = $line['quantity'] - $qty;\r\n                        $smData['quantity'] = $grt;\r\n                        $smData['source_location_id'] = 18;\r\n                        $smData['destination_location_id'] = $line['location_id'];\r\n                } elseif ($line['quantity'] < $qty) {\r\n                        $less = $qty - $line['quantity'];\r\n                        $smData['quantity'] = $less;\r\n                        $smData['source_location_id'] = $line['location_id'];\r\n                        $smData['destination_location_id'] = 18;\r\n                } else {\r\n                        continue;\r\n                }\r\n                $smData['description'] = $line['__product_id'];\r\n                $smData['type'] = 'Internal';\r\n                $smData['status'] = 'Done';\r\n                $smData['product_id'] = $line['product_id'];\r\n                $smData['uom_id'] = $line['uom_id'];\r\n                $smData['memo'] = $line['__inventory_id'];\r\n                $smData['related_to'] = $line['inventory_id'];\r\n                $smData['__related_to'] = $dataInv['number'];\r\n                $smData['related_to_model'] = 'physical_inventory';\r\n                $smData['fulfillment_date'] = $dataInv['creation_date'];\r\n                $smObject->save($smData, array('atomic' => true, 'validate' => FALSE));\r\n            }\r\n        }\r\n    }\r\n    $object->exitNode();\r\n}"
    }
]