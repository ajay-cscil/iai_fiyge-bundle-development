<?php

/**
 *
 * write any custom code in this class, build operation wont overwrite this class once generated;
 */

namespace module\activities\model;

class emails_domain_logic extends \data_model{

    public function dataForInstallation() {
        return array();
    }

    /**
     * @author Tushar Takkar<ttakkar@primarymodules.com>
     */
    public function beforeValidate() {
        $id = (isset($this->data[$this->primaryKey]) ? $this->data[$this->primaryKey] : false);
        $this->data['status'] = 'draft';
        foreach (array('email_to_recipients', 'email_cc_recipients', 'email_bcc_recipients') as $assocModel) {
            if (isset($this->data[$assocModel]) && !empty($this->data[$assocModel])) {
                $assocModelObj = $this->{$assocModel};
                $recipientType = \explode('_', $assocModel);
                $recipientType = $recipientType[1];
                $emailAddressesIDs = array();

                $emailAddresses = array();
                if (is_string($this->data[$assocModel])) {
                    $this->data[$assocModel] = array($this->data[$assocModel]);
                }
                if (is_array($this->data[$assocModel])) {
                    $data = $this->data[$assocModel];
                    if (isset($data['__email_address_id']) || isset($data['__email_address_id'])) {
                        if (isset($data['__email_address_id']) && is_string($data['__email_address_id'])) {
                            $emailAddresses = $this->cleanEmail(explode(',', $data['__email_address_id']));
                        }
                        if (isset($data['email_address_id']) && is_string($data['email_address_id'])) {
                            $data['email_address_id'] = json_decode($data['email_address_id'], true);
                            if (is_array($data['email_address_id'])) {
                                foreach ($data['email_address_id'] as $info) {
                                    $emailAddressesIDs[$this->cleanEmail($info[1])] = $info[0];
                                }
                            }
                        }
                    } else {
                        $emailAddresses = $data;
                    }
                }
                $saved = array();
                if ($id !== false) {
                    foreach (\select(array("{$assocModelObj->alias}.email_address", "{$assocModelObj->alias}.{$assocModelObj->primaryKey}"))
                            ->from($assocModelObj)
                            ->inserted()
                            ->where(
                                    array("{$assocModelObj->alias}.email_id" => $id
                                        , "{$assocModelObj->alias}.recipient_type" => $recipientType)
                            )->execute()
                            ->fetchAll(\PDO::FETCH_ASSOC) as $sa) {
                        $saved[$sa['email_address']] = $sa['id'];
                    }
                }
                $i = 0;
                $this->data[$assocModel] = array();
                if (is_array($emailAddresses)) {
                    foreach ($emailAddresses as $email) {
                        if (!empty($email)) {
                            $email_address_id = '';
                            $email_address = '';
                            if (is_string($email)) {
                                $email_address = $email;
                            } else if (is_array($email)) {
                                if (isset($email['email_address_id'])) {
                                    $email_address_id = $email['email_address_id'];
                                }
                                if (isset($email['email_address'])) {
                                    $email_address = $email['email_address'];
                                }
                            }
                            if (isset($emailAddressesIDs[$email_address])) {
                                $email_address_id = $emailAddressesIDs[$email_address];
                            }

                            if (!empty($email_address_id) || !empty($email_address)) {
                                $this->data[$assocModel][$i] = array(
                                    'email_address_id' => $email_address_id
                                    , 'email_address' => $email_address
                                    , 'recipient_type' => $recipientType
                                );
                                if (isset($saved[$email_address])) {
                                    $this->data[$assocModel][$i][$assocModelObj->primaryKey] = $saved[$email_address];
                                    unset($saved[$email_address]);
                                }
                                $i++;
                            }
                        }
                    }
                }
                if (!empty($saved)) {
                    foreach ($saved as $sav) {
                        $sav['deleted'] = 1;
                        $this->data[$assocModel][] = $sav;
                    }
                }
            }
        }
    }

    public function beforeSave() {
        parent::beforeSave();
        foreach (array('email_to_recipients', 'email_cc_recipients', 'email_bcc_recipients') as $assocModel) {
            if (isset($this->data[$assocModel]) && !empty($this->data[$assocModel])) {
                if (is_string($this->data[$assocModel])) {
                    $this->data[$assocModel] = explode(",", $this->data[$assocModel]);
                }
                $recipientType = \explode('_', $assocModel);
                $recipientType = (isset($recipientType[1]) ? $recipientType[1] : $recipientType[0]);
                if (is_array($this->data[$assocModel])) {
                    foreach ($this->data[$assocModel] as $k => $email) {
                        if (is_string($email) && !empty($email)) {
                            $this->data[$assocModel][$k] = array(
                                'email_address' => $email
                                , 'recipient_type' => $recipientType
                            );
                        }
                    }
                }
            }
        }
    }

    /**
     * @author Tushar Takkar<ttakkar@primarymodules.com>
     * @param type $created 
     */
    public function afterSave($created) {
        parent::afterSave($created);
        if (isset($this->data['action']['send'])) {
            \library('phpmailer' . DS . 'class.phpmailer.php');
            $mailer = new \PHPMailer();
            \module\administration\model\global_configurations::setServer($mailer);
            if (empty($this->data['from_email'])) {
                $userObj = \module\access_controls\model\users::getInstance();
                $userID = \tushar\user::read('id');
                if (!empty($userID)) {
                    $userInfo = current($userObj->read($userID, array('email_addresses')));
                    if (empty($this->data['from_email']) && isset($userInfo['email_addresses']) && is_array($userInfo['email_addresses']) && isset($userInfo['email_addresses'][0])) {
                        $this->data['from_email'] = $userInfo['email_addresses'][0]['email'];
                    }
                    if (empty($this->data['from_name'])) {
                        $this->data['from_name'] = \tushar\user::read('name');
                    }
                }
            }
            if (empty($this->data['from_email'])) {
                throw new \Exception(__('Please set a valid email address for current user to be used as senders email address'));
            }
            $mailer->From = $this->data['from_email'];
            $mailer->FromName = $this->data['from_name'];
            $mailer->Body = $this->data['body'];
            $mailer->isHTML(true);
            $mailer->Subject = $this->data['subject'];
            foreach (array('email_to_recipients', 'email_cc_recipients', 'email_bcc_recipients') as $assocModel) {
                if (isset($this->data[$assocModel]) && !empty($this->data[$assocModel])) {
                    foreach ($this->data[$assocModel] as $email) {
                        switch ($assocModel) {
                            case 'email_to_recipients':
                                $mailer->AddAddress($email['email_address']);
                                break;
                            case 'email_cc_recipients':
                                $mailer->AddCC($email['email_address']);
                                break;
                            case 'email_bcc_recipients':
                                $mailer->AddBCC($email['email_address']);
                        }
                    }
                }
            }
            $attachments = array();
            if (isset($this->{'attachments'}) && is_object($this->{'attachments'})) {
                $attachments = select('attachments.id')
                        ->from($this)
                        ->joinInner('attachments')
                        ->where(array('emails.id' => $this->data['id']))
                        ->execute()
                        ->fetchAll(\PDO::FETCH_COLUMN);
                $attachments = $this->{'attachments'}->readFiles($attachments);
            }
            foreach ($attachments as $path => $attachment) {
                if (!file_exists($path)) {
                    throw new \Exception(sprintf(
                            __('File %s(%s) not found'), $path, $attachment['name'])
                    );
                }
                $mailer->AddAttachment($path, $attachment['name'], 'base64', $attachment['mime_type']);
            }

            if (!$mailer->send()) {
                \update(array('status' => 'Failed', 'error_message' => $mailer->ErrorInfo))
                        ->from($this)
                        ->where($this->primaryKey, $this->id)
                        ->execute();

                $msg = sprintf(__('Email from "%s" could not be sent via smtp-host "%s:%s"', 'module'),$mailer->From,$mailer->Host,$mailer->Port);
                if (\tushar\configuration::read('debug') == true) {
                    $msg .= " due to Error: " . $mailer->ErrorInfo;
                }
                throw new \Exception($msg);
            } else {
                \update(array('status' => 'Sent'))
                        ->from($this)
                        ->where($this->primaryKey, $this->id)
                        ->execute();
                $this->acl = array();
                $this->acl['_acl_edit'] = $this->acl['_acl_delete'] = '';
                $acl = array();
                $userID = \tushar\user::read('id');
                if (!empty($userID)) {
                    $acl['u' . $userID] = 'u' . $userID;
                }
                if (isset($this->data['owned_by']) && !empty($this->data['owned_by'])) {
                    $acl['u' . $this->data['owned_by']] = 'u' . $this->data['owned_by'];
                }
                if (isset($this->data['primary_acl_group']) && !empty($this->data['primary_acl_group'])) {
                    $acl['g' . $this->data['primary_acl_group']] = 'g' . $this->data['primary_acl_group'];
                }
                $this->acl['_acl'] = implode(' ', $acl);
            }
        }
    }

    public function saveAndSend($data, $options = array()) {
        $data['action'] = array('send' => 'send');
        $status = 'Failed';
        if ($this->save($data, $options)) {
            $status = select(array('status'))
                            ->from($this)
                            ->where($this->primaryKey, $this->id)
                            ->execute()->fetch(\PDO::FETCH_COLUMN);
        }
        if (isset($data[$this->alias])) {
            $data[$this->alias]['status'] = $status;
        } else {
            $data['status'] = $status;
        }
        return $data;
    }

    private function cleanEmail($emails) {
        $isArray = false;
        if (!is_array($emails)) {
            $emails = array($emails);
        } else {
            $isArray = true;
        }
        foreach ($emails as $k => $email) {
            $emails[$k] = trim(current(explode('[', $email)));
        }
        if ($isArray) {
            return $emails;
        } else {
            return current($emails);
        }
    }

    function send($data) {
        \library('phpmailer' . DS . 'class.phpmailer.php');
        $mailer = new \PHPMailer();
        \module\administration\model\global_configurations::setServer($mailer);
        if (empty($data['from_email'])) {
            $userObj = \module\access_controls\model\users::getInstance();
            $userID = \tushar\user::read('id');
            if (!empty($userID)) {
                $userInfo = current($userObj->read($userID, array('email_addresses')));
                if (empty($data['from_email']) && isset($userInfo['email_addresses']) && is_array($userInfo['email_addresses']) && isset($userInfo['email_addresses'][0])) {
                    $data['from_email'] = $userInfo['email_addresses'][0]['email'];
                }
                if (empty($data['from_name'])) {
                    $data['from_name'] = \tushar\user::read('name');
                }
            }
        }
        if (empty($data['from_email'])) {
            throw new \Exception(__('Please set a valid from email address'));
        }
        $mailer->From = $data['from_email'];
        $mailer->FromName = $data['from_name'];
        $mailer->Body = $data['body'];
        $mailer->isHTML(true);
        $mailer->Subject = $data['subject'];
        foreach (array('email_to_recipients', 'email_cc_recipients', 'email_bcc_recipients') as $assocModel) {
            if (isset($data[$assocModel]) && !empty($data[$assocModel])) {
                if (is_string($data[$assocModel])) {
                    $emails = explode(",", $data[$assocModel]);
                    $data[$assocModel] = array();
                    foreach ($emails as $email) {
                        $data[$assocModel][] = array('email_address' => $email);
                    }
                }
                foreach ($data[$assocModel] as $email) {
                    switch ($assocModel) {
                        case 'email_to_recipients':
                            $mailer->AddAddress($email['email_address']);
                            break;
                        case 'email_cc_recipients':
                            $mailer->AddCC($email['email_address']);
                            break;
                        case 'email_bcc_recipients':
                            $mailer->AddBCC($email['email_address']);
                    }
                }
            }
        }
        return $mailer->send();
    }

}
