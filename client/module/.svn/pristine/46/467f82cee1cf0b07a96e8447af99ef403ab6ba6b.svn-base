[{"id":"60","created_by":"1","modified_by":null,"created":"2013-07-09 10:12:28","modified":null,"deleted":"0","revision":null,"flags":null,"owned_by":"1","title":"Welcome","note":"<h1>Welcome<a class=\"headerlink\" href=\"http:\/\/book.cakephp.org\/2.0\/en\/index.html#welcome\" title=\"Permalink to this headline\">\u00b6<\/a><\/h1>\r\n<p>The CakePHP cookbook, is an openly developed community editable documentation\r\nproject.  We hope to maintain a high level of quality, validity and accuracy for\r\nthe documentation.<\/p>","section_id":null,"is_publish":null},{"id":"61","created_by":"1","modified_by":null,"created":"2013-07-09 10:13:23","modified":null,"deleted":"0","revision":null,"flags":null,"owned_by":"1","title":"Installation","note":"<div class=\"content row\">\r\n\t<div class=\"document columns nine push-three\">\r\n\t\t<div class=\"body\">\r\n\t\t\t\r\n  <div class=\"section\" id=\"installation\">\r\n<h1>Installation<\/h1>\r\n<p>CakePHP is fast and easy to install. The minimum requirements are a\r\nwebserver and a copy of Cake, that\u2019s it! While this manual focuses\r\nprimarily on setting up with Apache (because it\u2019s the most common),\r\nyou can configure Cake to run on a variety of web servers such as\r\nLightHTTPD or Microsoft IIS.<\/p>\r\n<div class=\"section\" id=\"requirements\">\r\n<h2>Requirements<\/h2>\r\n<ul class=\"simple\"><li>HTTP Server. For example: Apache. mod_rewrite is preferred, but\r\nby no means required.<\/li><li>PHP 5.2.8 or greater.<\/li><\/ul>\r\n<p>Technically a database engine isn\u2019t required, but we imagine that\r\nmost applications will utilize one. CakePHP supports a variety of\r\ndatabase storage engines:<\/p>\r\n<ul class=\"simple\"><li>MySQL (4 or greater)<\/li><li>PostgreSQL<\/li><li>Microsoft SQL Server<\/li><li>SQLite<\/li><\/ul>\r\n<div class=\"admonition note\">\r\n<p class=\"first admonition-title\">Note<\/p>\r\n<p class=\"last\">The built-in drivers all require PDO.  You should make sure you have the\r\ncorrect PDO extensions installed.<\/p>\r\n<\/div>\r\n<\/div>\r\n<div class=\"section\" id=\"license\">\r\n<h2>License<\/h2>\r\n<p>CakePHP is licensed under the MIT license.  This means that you are free to\r\nmodify, distribute and republish the source code on the condition that the\r\ncopyright notices are left intact.  You are also free to incorporate CakePHP\r\ninto any Commercial or closed source application.<\/p>\r\n<\/div>\r\n<div class=\"section\" id=\"downloading-cakephp\">\r\n<h2>Downloading CakePHP<\/h2>\r\n<p>There are two main ways to get a fresh copy of CakePHP. You can\r\neither download an archive copy (zip\/tar.gz\/tar.bz2) from the main\r\nwebsite, or check out the code from the git repository.<\/p>\r\n<p>To download the latest major release of CakePHP. Visit the main\r\nwebsite <a class=\"reference external\" href=\"http:\/\/cakephp.org\/\">http:\/\/cakephp.org<\/a> and\r\nfollow the \u201cDownload Now\u201d link.<\/p>\r\n<p>All current releases of CakePHP are hosted on\r\n<a class=\"reference external\" href=\"http:\/\/github.com\/cakephp\/cakephp\">Github<\/a>. Github houses both CakePHP\r\nitself as well as many other plugins for CakePHP. The CakePHP\r\nreleases are available at\r\n<a class=\"reference external\" href=\"https:\/\/github.com\/cakephp\/cakephp\/tags\">Github tags<\/a>.<\/p>\r\n<p>Alternatively you can get fresh off the press code, with all the\r\nbug-fixes and up to the minute enhancements.\r\nThese can be accessed from github by cloning the\r\n<a class=\"reference external\" href=\"http:\/\/github.com\/cakephp\/cakephp\">Github<\/a> repository:<\/p>\r\n<div class=\"highlight-phpinline\"><div class=\"highlight\"><pre><span class=\"nx\">git<\/span> <span class=\"k\">clone<\/span> <span class=\"nx\">git<\/span><span class=\"o\">:\/\/<\/span><span class=\"nx\">github<\/span><span class=\"o\">.<\/span><span class=\"nx\">com<\/span><span class=\"o\">\/<\/span><span class=\"nx\">cakephp<\/span><span class=\"o\">\/<\/span><span class=\"nx\">cakephp<\/span><span class=\"o\">.<\/span><span class=\"nx\">git<\/span>\r\n<\/pre><\/div>\r\n<\/div>\r\n<\/div>\r\n<div class=\"section\" id=\"permissions\">\r\n<h2>Permissions<\/h2>\r\n<p>CakePHP uses the <tt class=\"docutils literal\"><span class=\"pre\">app\/tmp<\/span><\/tt> directory for a number of different\r\noperations. Model descriptions, cached views, and session\r\ninformation are just a few examples.<\/p>\r\n<p>As such, make sure the directory <tt class=\"docutils literal\"><span class=\"pre\">app\/tmp<\/span><\/tt> and all its subdirectories in your cake installation\r\nare writable by the web server user.<\/p>\r\n<\/div>\r\n<div class=\"section\" id=\"setup\">\r\n<h2>Setup<\/h2>\r\n<p>Setting up CakePHP can be as simple as slapping it in your web\r\nserver\u2019s document root, or as complex and flexible as you wish.\r\nThis section will cover the three main installation types for\r\nCakePHP: development, production, and advanced.<\/p>\r\n<ul class=\"simple\"><li>Development: easy to get going, URLs for the application include\r\nthe CakePHP installation directory name, and less secure.<\/li><li>Production: Requires the ability to configure the web server\u2019s\r\ndocument root, clean URLs, very secure.<\/li><li>Advanced: With some configuration, allows you to place key\r\nCakePHP directories in different parts of the filesystem, possibly\r\nsharing a single CakePHP core library folder amongst many CakePHP\r\napplications.<\/li><\/ul>\r\n<\/div>\r\n<div class=\"section\" id=\"development\">\r\n<h2>Development<\/h2>\r\n<p>A development installation is the fastest method to setup Cake.\r\nThis example will help you install a CakePHP application and make\r\nit available at <a class=\"reference external\" href=\"http:\/\/www.example.com\/cake_2_0\/\">http:\/\/www.example.com\/cake_2_0\/<\/a>. We assume for\r\nthe purposes of this example that your document root is set to\r\n<tt class=\"docutils literal\"><span class=\"pre\">\/var\/www\/html<\/span><\/tt>.<\/p>\r\n<p>Unpack the contents of the Cake archive into <tt class=\"docutils literal\"><span class=\"pre\">\/var\/www\/html<\/span><\/tt>. You now\r\nhave a folder in your document root named after the release you\u2019ve\r\ndownloaded (e.g. cake_2.0.0). Rename this folder to cake_2_0.\r\nYour development setup will look like this on the file system:<\/p>\r\n<div class=\"highlight-phpinline\"><div class=\"highlight\"><pre><span class=\"o\">\/<\/span><span class=\"k\">var<\/span><span class=\"o\">\/<\/span><span class=\"nx\">www<\/span><span class=\"o\">\/<\/span><span class=\"nx\">html<\/span><span class=\"o\">\/<\/span>\r\n    <span class=\"nx\">cake_2_0<\/span><span class=\"o\">\/<\/span>\r\n        <span class=\"nx\">app<\/span><span class=\"o\">\/<\/span>\r\n        <span class=\"nx\">lib<\/span><span class=\"o\">\/<\/span>\r\n        <span class=\"nx\">plugins<\/span><span class=\"o\">\/<\/span>\r\n        <span class=\"nx\">vendors<\/span><span class=\"o\">\/<\/span>\r\n        <span class=\"o\">.<\/span><span class=\"nx\">htaccess<\/span>\r\n        <span class=\"nx\">index<\/span><span class=\"o\">.<\/span><span class=\"nx\">php<\/span>\r\n        <span class=\"nx\">README<\/span>\r\n<\/pre><\/div>\r\n<\/div>\r\n<p>If your web server is configured correctly, you should now find\r\nyour Cake application accessible at\r\n<a class=\"reference external\" href=\"http:\/\/www.example.com\/cake_2_0\/\">http:\/\/www.example.com\/cake_2_0\/<\/a>.<\/p>\r\n<div class=\"section\" id=\"using-one-cakephp-checkout-for-multiple-applications\">\r\n<h3>Using one CakePHP checkout for multiple applications<\/h3>\r\n<p>If you are developing a number of applications, it often makes sense to have\r\nthem share the same CakePHP core checkout. There are a few ways in which you can\r\naccomplish this.  Often the easiest is to use PHP\u2019s <tt class=\"docutils literal\"><span class=\"pre\">include_path<\/span><\/tt>. To start\r\noff, clone CakePHP into a directory.  For this example, we\u2019ll use\r\n<tt class=\"docutils literal\"><span class=\"pre\">~\/projects<\/span><\/tt>:<\/p>\r\n<div class=\"highlight-phpinline\"><div class=\"highlight\"><pre><span class=\"nx\">git<\/span> <span class=\"k\">clone<\/span> <span class=\"nx\">git<\/span><span class=\"o\">:\/\/<\/span><span class=\"nx\">github<\/span><span class=\"o\">.<\/span><span class=\"nx\">com<\/span><span class=\"o\">\/<\/span><span class=\"nx\">cakephp<\/span><span class=\"o\">\/<\/span><span class=\"nx\">cakephp<\/span><span class=\"o\">.<\/span><span class=\"nx\">git<\/span> <span class=\"o\">~\/<\/span><span class=\"nx\">projects<\/span><span class=\"o\">\/<\/span><span class=\"nx\">cakephp<\/span>\r\n<\/pre><\/div>\r\n<\/div>\r\n<p>This will clone CakePHP into your <tt class=\"docutils literal\"><span class=\"pre\">~\/projects<\/span><\/tt> directory.  If you don\u2019t want\r\nto use git, you can download a zipball and the remaining steps will be the\r\nsame.  Next you\u2019ll have to locate and modify your <tt class=\"docutils literal\"><span class=\"pre\">php.ini<\/span><\/tt>.  On *nix systems\r\nthis is often in <tt class=\"docutils literal\"><span class=\"pre\">\/etc\/php.ini<\/span><\/tt>, but using <tt class=\"docutils literal\"><span class=\"pre\">php<\/span> <span class=\"pre\">-i<\/span><\/tt> and looking for \u2018Loaded\r\nConfiguration File\u2019.  Once you\u2019ve found the correct ini file, modify the\r\n<tt class=\"docutils literal\"><span class=\"pre\">include_path<\/span><\/tt> configuration to include <tt class=\"docutils literal\"><span class=\"pre\">~\/projects\/cakephp\/lib<\/span><\/tt>.  An\r\nexample would look like:<\/p>\r\n<div class=\"highlight-phpinline\"><div class=\"highlight\"><pre><span class=\"nx\">include_path<\/span> <span class=\"o\">=<\/span> <span class=\"o\">.:\/<\/span><span class=\"nx\">home<\/span><span class=\"o\">\/<\/span><span class=\"nx\">mark<\/span><span class=\"o\">\/<\/span><span class=\"nx\">projects<\/span><span class=\"o\">\/<\/span><span class=\"nx\">cakephp<\/span><span class=\"o\">\/<\/span><span class=\"nx\">lib<\/span><span class=\"o\">:\/<\/span><span class=\"nx\">usr<\/span><span class=\"o\">\/<\/span><span class=\"nx\">local<\/span><span class=\"o\">\/<\/span><span class=\"nx\">php<\/span><span class=\"o\">\/<\/span><span class=\"nx\">lib<\/span><span class=\"o\">\/<\/span><span class=\"nx\">php<\/span>\r\n<\/pre><\/div>\r\n<\/div>\r\n<p>After restarting your webserver, you should see the changes reflected in\r\n<tt class=\"docutils literal\"><span class=\"pre\">phpinfo()<\/span><\/tt>.<\/p>\r\n<div class=\"admonition note\">\r\n<p class=\"first admonition-title\">Note<\/p>\r\n<p class=\"last\">If you are on windows, separate include paths with ; instead of :<\/p>\r\n<\/div>\r\n<p>Having finished setting up your <tt class=\"docutils literal\"><span class=\"pre\">include_path<\/span><\/tt> your applications should be able to\r\nfind CakePHP automatically.<\/p>\r\n<\/div>\r\n<\/div>\r\n<div class=\"section\" id=\"production\">\r\n<h2>Production<\/h2>\r\n<p>A production installation is a more flexible way to setup Cake.\r\nUsing this method allows an entire domain to act as a single\r\nCakePHP application. This example will help you install Cake\r\nanywhere on your filesystem and make it available at\r\n<a class=\"reference external\" href=\"http:\/\/www.example.com\/\">http:\/\/www.example.com<\/a>. Note that this installation may require the\r\nrights to change the <tt class=\"docutils literal\"><span class=\"pre\">DocumentRoot<\/span><\/tt> on Apache webservers.<\/p>\r\n<p>Unpack the contents of the Cake archive into a directory of your\r\nchoosing. For the purposes of this example, we assume you choose to\r\ninstall Cake into \/cake_install. Your production setup will look\r\nlike this on the filesystem:<\/p>\r\n<div class=\"highlight-phpinline\"><div class=\"highlight\"><pre><span class=\"o\">\/<\/span><span class=\"nx\">cake_install<\/span><span class=\"o\">\/<\/span>\r\n    <span class=\"nx\">app<\/span><span class=\"o\">\/<\/span>\r\n        <span class=\"nx\">webroot<\/span><span class=\"o\">\/<\/span> <span class=\"p\">(<\/span><span class=\"k\">this<\/span> <span class=\"nx\">directory<\/span> <span class=\"nx\">is<\/span> <span class=\"nx\">set<\/span> <span class=\"k\">as<\/span> <span class=\"nx\">the<\/span> <span class=\"sb\">``<\/span><span class=\"nx\">DocumentRoot<\/span><span class=\"sb\">``<\/span>\r\n         <span class=\"nx\">directive<\/span><span class=\"p\">)<\/span>\r\n    <span class=\"nx\">lib<\/span><span class=\"o\">\/<\/span>\r\n    <span class=\"nx\">plugins<\/span><span class=\"o\">\/<\/span>\r\n    <span class=\"nx\">vendors<\/span><span class=\"o\">\/<\/span>\r\n    <span class=\"o\">.<\/span><span class=\"nx\">htaccess<\/span>\r\n    <span class=\"nx\">index<\/span><span class=\"o\">.<\/span><span class=\"nx\">php<\/span>\r\n    <span class=\"nx\">README<\/span>\r\n<\/pre><\/div>\r\n<\/div>\r\n<p>Developers using Apache should set the <tt class=\"docutils literal\"><span class=\"pre\">DocumentRoot<\/span><\/tt> directive\r\nfor the domain to:<\/p>\r\n<div class=\"highlight-phpinline\"><div class=\"highlight\"><pre><span class=\"nx\">DocumentRoot<\/span> <span class=\"o\">\/<\/span><span class=\"nx\">cake_install<\/span><span class=\"o\">\/<\/span><span class=\"nx\">app<\/span><span class=\"o\">\/<\/span><span class=\"nx\">webroot<\/span>\r\n<\/pre><\/div>\r\n<\/div>\r\n<p>If your web server is configured correctly, you should now find\r\nyour Cake application accessible at <a class=\"reference external\" href=\"http:\/\/www.example.com\/\">http:\/\/www.example.com<\/a>.<\/p>\r\n<\/div>\r\n<div class=\"section\" id=\"advanced-installation-and-url-rewriting\">\r\n<h2>Advanced Installation and URL Rewriting<\/h2>\r\n<div class=\"toctree-wrapper compound\">\r\n<ul><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"http:\/\/book.cakephp.org\/2.0\/en\/installation\/advanced-installation.html\">Advanced Installation<\/a><ul><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"http:\/\/book.cakephp.org\/2.0\/en\/installation\/advanced-installation.html#installing-cakephp-with-pear-installer\">Installing CakePHP with PEAR installer<\/a><\/li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"http:\/\/book.cakephp.org\/2.0\/en\/installation\/advanced-installation.html#installing-cakephp-with-composer\">Installing CakePHP with composer<\/a><\/li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"http:\/\/book.cakephp.org\/2.0\/en\/installation\/advanced-installation.html#sharing-cakephp-libraries-with-multiple-applications\">Sharing CakePHP libraries with multiple applications<\/a><\/li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"http:\/\/book.cakephp.org\/2.0\/en\/installation\/advanced-installation.html#apache-and-mod-rewrite-and-htaccess\">Apache and mod_rewrite (and .htaccess)<\/a><\/li><\/ul>\r\n<\/li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"http:\/\/book.cakephp.org\/2.0\/en\/installation\/url-rewriting.html\">URL Rewriting<\/a><ul><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"http:\/\/book.cakephp.org\/2.0\/en\/installation\/url-rewriting.html#apache-and-mod-rewrite-and-htaccess\">Apache and mod_rewrite (and .htaccess)<\/a><\/li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"http:\/\/book.cakephp.org\/2.0\/en\/installation\/url-rewriting.html#pretty-urls-on-nginx\">Pretty URLs on nginx<\/a><\/li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"http:\/\/book.cakephp.org\/2.0\/en\/installation\/url-rewriting.html#url-rewrites-on-iis7-windows-hosts\">URL Rewrites on IIS7 (Windows hosts)<\/a><\/li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"http:\/\/book.cakephp.org\/2.0\/en\/installation\/url-rewriting.html#i-don-t-can-t-use-url-rewriting\">I don\u2019t \/ can\u2019t use URL rewriting<\/a><\/li><\/ul>\r\n<\/li><\/ul>\r\n<\/div>\r\n<\/div>\r\n<div class=\"section\" id=\"fire-it-up\">\r\n<h2>Fire It Up<\/h2>\r\n<p>Alright, let\u2019s see CakePHP in action. Depending on which setup you\r\nused, you should point your browser to <a class=\"reference external\" href=\"http:\/\/example.com\/\">http:\/\/example.com\/<\/a> or\r\n<a class=\"reference external\" href=\"http:\/\/example.com\/cake_install\/\">http:\/\/example.com\/cake_install\/<\/a>. At this point, you\u2019ll be\r\npresented with CakePHP\u2019s default home, and a message that tells you\r\nthe status of your current database connection.<\/p>\r\n<p>Congratulations! You are ready to <a class=\"reference internal\" href=\"http:\/\/book.cakephp.org\/2.0\/en\/getting-started.html\"><em>create your first CakePHP\r\napplication<\/em><\/a>.<\/p>\r\n<p>Not working? If you\u2019re getting timezone related error from PHP\r\nuncomment one line in <tt class=\"docutils literal\"><span class=\"pre\">app\/Config\/core.php<\/span><\/tt>:<\/p>\r\n<div class=\"highlight-phpinline\"><div class=\"highlight\"><pre><span class=\"sd\">\/**<\/span>\r\n<span class=\"sd\"> * Uncomment this line and correct your server timezone to fix<\/span>\r\n<span class=\"sd\"> * any date &amp; time related errors.<\/span>\r\n<span class=\"sd\"> *\/<\/span>\r\n    <span class=\"nx\">date_default_timezone_set<\/span><span class=\"p\">(<\/span><span class=\"s1\">'UTC'<\/span><span class=\"p\">);<\/span><\/pre><\/div><\/div><\/div><\/div><\/div><\/div><\/div>","section_id":null,"is_publish":null},{"id":"62","created_by":"1","modified_by":null,"created":"2013-07-09 10:13:56","modified":null,"deleted":"0","revision":null,"flags":null,"owned_by":"1","title":"Advanced Installation","note":"<h1>Advanced Installation<\/h1>\r\n<div class=\"section\" id=\"installing-cakephp-with-pear-installer\">\r\n<h2>Installing CakePHP with PEAR installer<\/h2>\r\n<p>CakePHP publishes a PEAR package that you can install using the pear installer.\r\nInstalling with the pear installer can simplify sharing CakePHP libraries\r\nacross multiple applications. To install CakePHP with pear you\u2019ll need to do the\r\nfollowing:<\/p>\r\n<div class=\"highlight-phpinline\"><div class=\"highlight\"><pre><span class=\"nx\">pear<\/span> <span class=\"nx\">channel<\/span><span class=\"o\">-<\/span><span class=\"nx\">discover<\/span> <span class=\"nx\">pear<\/span><span class=\"o\">.<\/span><span class=\"nx\">cakephp<\/span><span class=\"o\">.<\/span><span class=\"nx\">org<\/span>\r\n<span class=\"nx\">pear<\/span> <span class=\"nx\">install<\/span> <span class=\"nx\">cakephp<\/span><span class=\"o\">\/<\/span><span class=\"nx\">CakePHP<\/span>\r\n<\/pre><\/div>\r\n<\/div>\r\n<div class=\"admonition note\">\r\n<p class=\"first admonition-title\">Note<\/p>\r\n<p class=\"last\">On some systems installing libraries with pear will require <tt class=\"docutils literal\"><span class=\"pre\">sudo<\/span><\/tt>.<\/p>\r\n<\/div>\r\n<p>After installing CakePHP with pear, if pear is configured correctly you should\r\nbe able to use the <tt class=\"docutils literal\"><span class=\"pre\">cake<\/span><\/tt> command to create a new application. Since CakePHP\r\nwill be located on PHP\u2019s <tt class=\"docutils literal\"><span class=\"pre\">include_path<\/span><\/tt> you won\u2019t need to make any other\r\nchanges.<\/p>\r\n<\/div>\r\n<div class=\"section\" id=\"installing-cakephp-with-composer\">\r\n<h2>Installing CakePHP with composer<\/h2>\r\n<p>Composer is a dependency management tool for PHP 5.3+. It solves many of the\r\nproblems the PEAR installer has, and simplifies managing multiple versions of\r\nlibraries.  Since CakePHP publishes a PEAR package you can install CakePHP using\r\n<a class=\"reference external\" href=\"http:\/\/getcomposer.org\/\">composer<\/a>. Before installing CakePHP you\u2019ll need to\r\nsetup a <tt class=\"docutils literal\"><span class=\"pre\">composer.json<\/span><\/tt> file. An composer.json file for a CakePHP applications\r\nwould look like the following:<\/p>\r\n<div class=\"highlight-phpinline\"><div class=\"highlight\"><pre><span class=\"p\">{<\/span>\r\n    <span class=\"s2\">\"name\"<\/span><span class=\"o\">:<\/span> <span class=\"s2\">\"example-app\"<\/span><span class=\"p\">,<\/span>\r\n    <span class=\"s2\">\"repositories\"<\/span><span class=\"o\">:<\/span> <span class=\"p\">[<\/span>\r\n        <span class=\"p\">{<\/span>\r\n            <span class=\"s2\">\"type\"<\/span><span class=\"o\">:<\/span> <span class=\"s2\">\"pear\"<\/span><span class=\"p\">,<\/span>\r\n            <span class=\"s2\">\"url\"<\/span><span class=\"o\">:<\/span> <span class=\"s2\">\"http:\/\/pear.cakephp.org\"<\/span>\r\n        <span class=\"p\">}<\/span>\r\n    <span class=\"p\">],<\/span>\r\n    <span class=\"s2\">\"require\"<\/span><span class=\"o\">:<\/span> <span class=\"p\">{<\/span>\r\n        <span class=\"s2\">\"pear-cakephp\/cakephp\"<\/span><span class=\"o\">:<\/span> <span class=\"s2\">\"&gt;=2.3.4\"<\/span>\r\n    <span class=\"p\">},<\/span>\r\n    <span class=\"s2\">\"config\"<\/span><span class=\"o\">:<\/span> <span class=\"p\">{<\/span>\r\n        <span class=\"s2\">\"vendor-dir\"<\/span><span class=\"o\">:<\/span> <span class=\"s2\">\"Vendor\/\"<\/span>\r\n    <span class=\"p\">}<\/span>\r\n<span class=\"p\">}<\/span>\r\n<\/pre><\/div>\r\n<\/div>\r\n<p>Save this JSON into <tt class=\"docutils literal\"><span class=\"pre\">composer.json<\/span><\/tt> in the root directory of your project.\r\nNext download the composer.phar file into your project. After you\u2019ve downloaded\r\ncomposer, install CakePHP. In the same directory as your <tt class=\"docutils literal\"><span class=\"pre\">composer.json<\/span><\/tt> run\r\nthe following:<\/p>\r\n<div class=\"highlight-phpinline\"><div class=\"highlight\"><pre><span class=\"err\">$<\/span> <span class=\"nx\">php<\/span> <span class=\"nx\">composer<\/span><span class=\"o\">.<\/span><span class=\"nx\">phar<\/span> <span class=\"nx\">install<\/span>\r\n<\/pre><\/div>\r\n<\/div>\r\n<p>Once composer has finished running you should have a directory structure that looks like:<\/p>\r\n<div class=\"highlight-phpinline\"><div class=\"highlight\"><pre><span class=\"nx\">example<\/span><span class=\"o\">-<\/span><span class=\"nx\">app<\/span><span class=\"o\">\/<\/span>\r\n    <span class=\"nx\">composer<\/span><span class=\"o\">.<\/span><span class=\"nx\">phar<\/span>\r\n    <span class=\"nx\">composer<\/span><span class=\"o\">.<\/span><span class=\"nx\">json<\/span>\r\n    <span class=\"nx\">Vendor<\/span><span class=\"o\">\/<\/span>\r\n        <span class=\"nx\">bin<\/span><span class=\"o\">\/<\/span>\r\n        <span class=\"nx\">autoload<\/span><span class=\"o\">.<\/span><span class=\"nx\">php<\/span>\r\n        <span class=\"nx\">composer<\/span><span class=\"o\">\/<\/span>\r\n        <span class=\"nx\">pear<\/span><span class=\"o\">-<\/span><span class=\"nx\">pear<\/span><span class=\"o\">.<\/span><span class=\"nx\">cakephp<\/span><span class=\"o\">.<\/span><span class=\"nx\">org<\/span><span class=\"o\">\/<\/span>\r\n<\/pre><\/div>\r\n<\/div>\r\n<p>You are now ready to generate the rest of your application skeleton:<\/p>\r\n<div class=\"highlight-phpinline\"><div class=\"highlight\"><pre><span class=\"err\">$<\/span> <span class=\"nx\">Vendor<\/span><span class=\"o\">\/<\/span><span class=\"nx\">bin<\/span><span class=\"o\">\/<\/span><span class=\"nx\">cake<\/span> <span class=\"nx\">bake<\/span> <span class=\"nx\">project<\/span> <span class=\"o\">&lt;<\/span><span class=\"nx\">path<\/span> <span class=\"nx\">to<\/span> <span class=\"nx\">project<\/span><span class=\"o\">&gt;<\/span>\r\n<\/pre><\/div>\r\n<\/div>\r\n<p>By default <tt class=\"docutils literal\"><span class=\"pre\">bake<\/span><\/tt> will hard-code <a class=\"reference internal\" href=\"http:\/\/book.cakephp.org\/2.0\/en\/core-libraries\/global-constants-and-functions.html#CAKE_CORE_INCLUDE_PATH\" title=\"CAKE_CORE_INCLUDE_PATH\"><tt class=\"xref php php-const docutils literal\"><span class=\"pre\">CAKE_CORE_INCLUDE_PATH<\/span><\/tt><\/a>. To\r\nmake your application more portable you should modify <tt class=\"docutils literal\"><span class=\"pre\">webroot\/index.php<\/span><\/tt>,\r\nchanging <tt class=\"docutils literal\"><span class=\"pre\">CAKE_CORE_INCLUDE_PATH<\/span><\/tt> to be a relative path:<\/p>\r\n<div class=\"highlight-phpinline\"><div class=\"highlight\"><pre><span class=\"nb\">define<\/span><span class=\"p\">(<\/span>\r\n    <span class=\"s1\">'CAKE_CORE_INCLUDE_PATH'<\/span><span class=\"p\">,<\/span>\r\n    <span class=\"nx\">ROOT<\/span> <span class=\"o\">.<\/span> <span class=\"nx\">DS<\/span> <span class=\"o\">.<\/span> <span class=\"nx\">APP_DIR<\/span> <span class=\"o\">.<\/span> <span class=\"s1\">'\/Vendor\/pear-pear.cakephp.org\/CakePHP'<\/span>\r\n<span class=\"p\">);<\/span>\r\n<\/pre><\/div>\r\n<\/div>\r\n<p>If you\u2019re installing any other libraries with composer, you\u2019ll need to setup\r\nthe autoloader, and work around an issue in composer\u2019s autoloader. In your\r\n<tt class=\"docutils literal\"><span class=\"pre\">Config\/bootstrap.php<\/span><\/tt> file add the following:<\/p>\r\n<div class=\"highlight-phpinline\"><div class=\"highlight\"><pre><span class=\"c1\">\/\/ Load composer autoload.<\/span>\r\n<span class=\"k\">require<\/span> <span class=\"nx\">APP<\/span> <span class=\"o\">.<\/span> <span class=\"s1\">'\/Vendor\/autoload.php'<\/span><span class=\"p\">;<\/span>\r\n\r\n<span class=\"c1\">\/\/ Remove and re-prepend CakePHP's autoloader as composer thinks it is the most important.<\/span>\r\n<span class=\"c1\">\/\/ See https:\/\/github.com\/composer\/composer\/commit\/c80cb76b9b5082ecc3e5b53b1050f76bb27b127b<\/span>\r\n<span class=\"nx\">spl_autoload_unregister<\/span><span class=\"p\">(<\/span><span class=\"k\">array<\/span><span class=\"p\">(<\/span><span class=\"s1\">'App'<\/span><span class=\"p\">,<\/span> <span class=\"s1\">'load'<\/span><span class=\"p\">));<\/span>\r\n<span class=\"nx\">spl_autoload_register<\/span><span class=\"p\">(<\/span><span class=\"k\">array<\/span><span class=\"p\">(<\/span><span class=\"s1\">'App'<\/span><span class=\"p\">,<\/span> <span class=\"s1\">'load'<\/span><span class=\"p\">),<\/span> <span class=\"k\">true<\/span><span class=\"p\">,<\/span> <span class=\"k\">true<\/span><span class=\"p\">);<\/span>\r\n<\/pre><\/div>\r\n<\/div>\r\n<p>You should now have a functioning CakePHP application with CakePHP installed via\r\ncomposer. Be sure to keep the composer.json and composer.lock file with the\r\nrest of your source code.<\/p>\r\n<\/div>\r\n\r\n<h2>Sharing CakePHP libraries with multiple applications<\/h2>\r\n<p>There may be some situations where you wish to place CakePHP\u2019s\r\ndirectories on different places on the filesystem. This may be due\r\nto a shared host restriction, or maybe you just want a few of your\r\napps to share the same Cake libraries. This section describes how\r\nto spread your CakePHP directories across a filesystem.<\/p>\r\n<p>First, realize that there are three main parts to a Cake\r\napplication:<\/p>\r\n<ol class=\"arabic simple\"><li>The core CakePHP libraries, in \/lib\/Cake.<\/li><li>Your application code, in \/app.<\/li><li>The application\u2019s webroot, usually in \/app\/webroot.<\/li><\/ol>\r\n<p>Each of these directories can be located anywhere on your file\r\nsystem, with the exception of the webroot, which needs to be\r\naccessible by your web server. You can even move the webroot folder\r\nout of the app folder as long as you tell Cake where you\u2019ve put\r\nit.<\/p>\r\n<p>To configure your Cake installation, you\u2019ll need to make some\r\nchanges to the following files.<\/p>\r\n<ul class=\"simple\"><li>\/app\/webroot\/index.php<\/li><li>\/app\/webroot\/test.php (if you use the\r\n<a class=\"reference internal\" href=\"http:\/\/book.cakephp.org\/2.0\/en\/development\/testing.html\"><em>Testing<\/em><\/a> feature.)<\/li><\/ul>\r\n<p>There are three constants that you\u2019ll need to edit: <tt class=\"docutils literal\"><span class=\"pre\">ROOT<\/span><\/tt>,\r\n<tt class=\"docutils literal\"><span class=\"pre\">APP_DIR<\/span><\/tt>, and <tt class=\"docutils literal\"><span class=\"pre\">CAKE_CORE_INCLUDE_PATH<\/span><\/tt>.<\/p>\r\n<ul class=\"simple\"><li><tt class=\"docutils literal\"><span class=\"pre\">ROOT<\/span><\/tt> should be set to the path of the directory that\r\ncontains your app folder.<\/li><li><tt class=\"docutils literal\"><span class=\"pre\">APP_DIR<\/span><\/tt> should be set to the (base)name of your app folder.<\/li><li><tt class=\"docutils literal\"><span class=\"pre\">CAKE_CORE_INCLUDE_PATH<\/span><\/tt> should be set to the path of your\r\nCakePHP libraries folder.<\/li><\/ul>\r\n<p>Let\u2019s run through an example so you can see what an advanced\r\ninstallation might look like in practice. Imagine that I wanted to\r\nset up CakePHP to work as follows:<\/p>\r\n<ul class=\"simple\"><li>The CakePHP core libraries will be placed in \/usr\/lib\/cake.<\/li><li>My application\u2019s webroot directory will be \/var\/www\/mysite\/.<\/li><li>My application\u2019s app directory will be \/home\/me\/myapp.<\/li><\/ul>\r\n","section_id":null,"is_publish":null},{"id":"63","created_by":"1","modified_by":null,"created":"2013-07-09 10:14:23","modified":null,"deleted":"0","revision":null,"flags":null,"owned_by":"1","title":"URL Rewriting","note":"<h1>URL Rewriting<\/h1>\r\n<div class=\"section\" id=\"apache-and-mod-rewrite-and-htaccess\">\r\n<h2>Apache and mod_rewrite (and .htaccess)<\/h2>\r\n<p>While CakePHP is built to work with mod_rewrite out of the box\u2013and\r\nusually does\u2013we\u2019ve noticed that a few users struggle with getting\r\neverything to play nicely on their systems.<\/p>\r\n<p>Here are a few things you might try to get it running correctly.\r\nFirst look at your httpd.conf (Make sure you are editing the system\r\nhttpd.conf rather than a user- or site-specific httpd.conf).<\/p>\r\n<ol class=\"arabic\"><li><p class=\"first\">Make sure that an .htaccess override is allowed and that\r\nAllowOverride is set to All for the correct DocumentRoot. You\r\nshould see something similar to:<\/p>\r\n<div class=\"highlight-phpinline\"><div class=\"highlight\"><pre><span class=\"c1\"># Each directory to which Apache has access can be configured with respect<\/span>\r\n<span class=\"c1\"># to which services and features are allowed and\/or disabled in that<\/span>\r\n<span class=\"c1\"># directory (and its subdirectories).<\/span>\r\n<span class=\"c1\">#<\/span>\r\n<span class=\"c1\"># First, we configure the \"default\" to be a very restrictive set of<\/span>\r\n<span class=\"c1\"># features.<\/span>\r\n<span class=\"c1\">#<\/span>\r\n<span class=\"o\">&lt;<\/span><span class=\"nx\">Directory<\/span> <span class=\"o\">\/&gt;<\/span>\r\n    <span class=\"nx\">Options<\/span> <span class=\"nx\">FollowSymLinks<\/span>\r\n    <span class=\"nx\">AllowOverride<\/span> <span class=\"nx\">All<\/span>\r\n<span class=\"c1\">#    Order deny,allow<\/span>\r\n<span class=\"c1\">#    Deny from all<\/span>\r\n<span class=\"o\">&lt;\/<\/span><span class=\"nx\">Directory<\/span><span class=\"o\">&gt;<\/span>\r\n<\/pre><\/div>\r\n<\/div>\r\n<\/li><li><p class=\"first\">Make sure you are loading up mod_rewrite correctly. You should\r\nsee something like:<\/p>\r\n<div class=\"highlight-phpinline\"><div class=\"highlight\"><pre><span class=\"nx\">LoadModule<\/span> <span class=\"nx\">rewrite_module<\/span> <span class=\"nx\">libexec<\/span><span class=\"o\">\/<\/span><span class=\"nx\">apache2<\/span><span class=\"o\">\/<\/span><span class=\"nx\">mod_rewrite<\/span><span class=\"o\">.<\/span><span class=\"nx\">so<\/span>\r\n<\/pre><\/div>\r\n<\/div>\r\n<p>In many systems these will be commented out (by being prepended\r\nwith a #) by default, so you may just need to remove those leading\r\n# symbols.<\/p>\r\n<p>After you make changes, restart Apache to make sure the settings\r\nare active.<\/p>\r\n<p>Verify that you your .htaccess files are actually in the right\r\ndirectories.<\/p>\r\n<p>This can happen during copying because some operating systems treat\r\nfiles that start with \u2018.\u2019 as hidden and therefore won\u2019t see them to\r\ncopy.<\/p>\r\n<\/li><li><p class=\"first\">Make sure your copy of CakePHP is from the downloads section of\r\nthe site or our GIT repository, and has been unpacked correctly by\r\nchecking for .htaccess files.<\/p>\r\n<p>Cake root directory (needs to be copied to your document, this\r\nredirects everything to your Cake app):<\/p>\r\n<div class=\"highlight-phpinline\"><div class=\"highlight\"><pre><span class=\"o\">&lt;<\/span><span class=\"nx\">IfModule<\/span> <span class=\"nx\">mod_rewrite<\/span><span class=\"o\">.<\/span><span class=\"nx\">c<\/span><span class=\"o\">&gt;<\/span>\r\n   <span class=\"nx\">RewriteEngine<\/span> <span class=\"nx\">on<\/span>\r\n   <span class=\"nx\">RewriteRule<\/span>    <span class=\"o\">^<\/span><span class=\"err\">$<\/span> <span class=\"nx\">app<\/span><span class=\"o\">\/<\/span><span class=\"nx\">webroot<\/span><span class=\"o\">\/<\/span>    <span class=\"p\">[<\/span><span class=\"nx\">L<\/span><span class=\"p\">]<\/span>\r\n   <span class=\"nx\">RewriteRule<\/span>    <span class=\"p\">(<\/span><span class=\"o\">.*<\/span><span class=\"p\">)<\/span> <span class=\"nx\">app<\/span><span class=\"o\">\/<\/span><span class=\"nx\">webroot<\/span><span class=\"o\">\/<\/span><span class=\"err\">$<\/span><span class=\"mi\">1<\/span> <span class=\"p\">[<\/span><span class=\"nx\">L<\/span><span class=\"p\">]<\/span>\r\n<span class=\"o\">&lt;\/<\/span><span class=\"nx\">IfModule<\/span><span class=\"o\">&gt;<\/span>\r\n<\/pre><\/div>\r\n<\/div>\r\n<p>Cake app directory (will be copied to the top directory of your\r\napplication by bake):<\/p>\r\n<div class=\"highlight-phpinline\"><div class=\"highlight\"><pre><span class=\"o\">&lt;<\/span><span class=\"nx\">IfModule<\/span> <span class=\"nx\">mod_rewrite<\/span><span class=\"o\">.<\/span><span class=\"nx\">c<\/span><span class=\"o\">&gt;<\/span>\r\n   <span class=\"nx\">RewriteEngine<\/span> <span class=\"nx\">on<\/span>\r\n   <span class=\"nx\">RewriteRule<\/span>    <span class=\"o\">^<\/span><span class=\"err\">$<\/span>    <span class=\"nx\">webroot<\/span><span class=\"o\">\/<\/span>    <span class=\"p\">[<\/span><span class=\"nx\">L<\/span><span class=\"p\">]<\/span>\r\n   <span class=\"nx\">RewriteRule<\/span>    <span class=\"p\">(<\/span><span class=\"o\">.*<\/span><span class=\"p\">)<\/span> <span class=\"nx\">webroot<\/span><span class=\"o\">\/<\/span><span class=\"err\">$<\/span><span class=\"mi\">1<\/span>    <span class=\"p\">[<\/span><span class=\"nx\">L<\/span><span class=\"p\">]<\/span>\r\n<span class=\"o\">&lt;\/<\/span><span class=\"nx\">IfModule<\/span><span class=\"o\">&gt;<\/span>\r\n<\/pre><\/div>\r\n<\/div>\r\n<p>Cake webroot directory (will be copied to your application\u2019s web\r\nroot by bake):<\/p>\r\n<div class=\"highlight-phpinline\"><div class=\"highlight\"><pre><span class=\"o\">&lt;<\/span><span class=\"nx\">IfModule<\/span> <span class=\"nx\">mod_rewrite<\/span><span class=\"o\">.<\/span><span class=\"nx\">c<\/span><span class=\"o\">&gt;<\/span>\r\n    <span class=\"nx\">RewriteEngine<\/span> <span class=\"nx\">On<\/span>\r\n    <span class=\"nx\">RewriteCond<\/span> <span class=\"o\">%<\/span><span class=\"p\">{<\/span><span class=\"nx\">REQUEST_FILENAME<\/span><span class=\"p\">}<\/span> <span class=\"o\">!-<\/span><span class=\"nx\">d<\/span>\r\n    <span class=\"nx\">RewriteCond<\/span> <span class=\"o\">%<\/span><span class=\"p\">{<\/span><span class=\"nx\">REQUEST_FILENAME<\/span><span class=\"p\">}<\/span> <span class=\"o\">!-<\/span><span class=\"nx\">f<\/span>\r\n    <span class=\"nx\">RewriteRule<\/span> <span class=\"o\">^<\/span><span class=\"p\">(<\/span><span class=\"o\">.*<\/span><span class=\"p\">)<\/span><span class=\"err\">$<\/span> <span class=\"nx\">index<\/span><span class=\"o\">.<\/span><span class=\"nx\">php<\/span> <span class=\"p\">[<\/span><span class=\"nx\">QSA<\/span><span class=\"p\">,<\/span><span class=\"nx\">L<\/span><span class=\"p\">]<\/span>\r\n<span class=\"o\">&lt;\/<\/span><span class=\"nx\">IfModule<\/span><span class=\"o\">&gt;<\/span>\r\n<\/pre><\/div>\r\n<\/div>\r\n<p>If your CakePHP site still has problems with mod_rewrite you might\r\nwant to try and modify settings for virtualhosts. If on ubuntu,\r\nedit the file \/etc\/apache2\/sites-available\/default (location is\r\ndistribution dependent). In this file, ensure that\r\n<tt class=\"docutils literal\"><span class=\"pre\">AllowOverride<\/span> <span class=\"pre\">None<\/span><\/tt> is changed to <tt class=\"docutils literal\"><span class=\"pre\">AllowOverride<\/span> <span class=\"pre\">All<\/span><\/tt>, so you have:<\/p>\r\n<div class=\"highlight-phpinline\"><div class=\"highlight\"><pre><span class=\"o\">&lt;<\/span><span class=\"nx\">Directory<\/span> <span class=\"o\">\/&gt;<\/span>\r\n    <span class=\"nx\">Options<\/span> <span class=\"nx\">FollowSymLinks<\/span>\r\n    <span class=\"nx\">AllowOverride<\/span> <span class=\"nx\">All<\/span>\r\n<span class=\"o\">&lt;\/<\/span><span class=\"nx\">Directory<\/span><span class=\"o\">&gt;<\/span>\r\n<span class=\"o\">&lt;<\/span><span class=\"nx\">Directory<\/span> <span class=\"o\">\/<\/span><span class=\"k\">var<\/span><span class=\"o\">\/<\/span><span class=\"nx\">www<\/span><span class=\"o\">&gt;<\/span>\r\n    <span class=\"nx\">Options<\/span> <span class=\"nx\">Indexes<\/span> <span class=\"nx\">FollowSymLinks<\/span> <span class=\"nx\">MultiViews<\/span>\r\n    <span class=\"nx\">AllowOverride<\/span> <span class=\"nx\">All<\/span>\r\n    <span class=\"nx\">Order<\/span> <span class=\"nx\">Allow<\/span><span class=\"p\">,<\/span><span class=\"nx\">Deny<\/span>\r\n    <span class=\"nx\">Allow<\/span> <span class=\"nx\">from<\/span> <span class=\"nx\">all<\/span>\r\n<span class=\"o\">&lt;\/<\/span><span class=\"nx\">Directory<\/span><span class=\"o\">&gt;<\/span>\r\n<\/pre><\/div>\r\n<\/div>\r\n<p>If on Mac OSX, another solution is to use the tool virtualhostx to\r\nmake a virtual host to point to your folder.<\/p>\r\n<p>For many hosting services (GoDaddy, 1and1), your web server is\r\nactually being served from a user directory that already uses\r\nmod_rewrite. If you are installing CakePHP into a user directory\r\n(<a class=\"reference external\" href=\"http:\/\/example.com\/%7Eusername\/cakephp\/\">http:\/\/example.com\/~username\/cakephp\/<\/a>), or any other URL structure\r\nthat already utilizes mod_rewrite, you\u2019ll need to add RewriteBase\r\nstatements to the .htaccess files CakePHP uses (\/.htaccess,\r\n\/app\/.htaccess, \/app\/webroot\/.htaccess).<\/p>\r\n<p>This can be added to the same section with the RewriteEngine\r\ndirective, so for example your webroot .htaccess file would look\r\nlike:<\/p>\r\n<div class=\"highlight-phpinline\"><div class=\"highlight\"><pre><span class=\"o\">&lt;<\/span><span class=\"nx\">IfModule<\/span> <span class=\"nx\">mod_rewrite<\/span><span class=\"o\">.<\/span><span class=\"nx\">c<\/span><span class=\"o\">&gt;<\/span>\r\n    <span class=\"nx\">RewriteEngine<\/span> <span class=\"nx\">On<\/span>\r\n    <span class=\"nx\">RewriteBase<\/span> <span class=\"o\">\/<\/span><span class=\"nx\">path<\/span><span class=\"o\">\/<\/span><span class=\"nx\">to<\/span><span class=\"o\">\/<\/span><span class=\"nx\">cake<\/span><span class=\"o\">\/<\/span><span class=\"nx\">app<\/span>\r\n    <span class=\"nx\">RewriteCond<\/span> <span class=\"o\">%<\/span><span class=\"p\">{<\/span><span class=\"nx\">REQUEST_FILENAME<\/span><span class=\"p\">}<\/span> <span class=\"o\">!-<\/span><span class=\"nx\">d<\/span>\r\n    <span class=\"nx\">RewriteCond<\/span> <span class=\"o\">%<\/span><span class=\"p\">{<\/span><span class=\"nx\">REQUEST_FILENAME<\/span><span class=\"p\">}<\/span> <span class=\"o\">!-<\/span><span class=\"nx\">f<\/span>\r\n    <span class=\"nx\">RewriteRule<\/span> <span class=\"o\">^<\/span><span class=\"p\">(<\/span><span class=\"o\">.*<\/span><span class=\"p\">)<\/span><span class=\"err\">$<\/span> <span class=\"nx\">index<\/span><span class=\"o\">.<\/span><span class=\"nx\">php<\/span> <span class=\"p\">[<\/span><span class=\"nx\">QSA<\/span><span class=\"p\">,<\/span><span class=\"nx\">L<\/span><span class=\"p\">]<\/span>\r\n<span class=\"o\">&lt;\/<\/span><span class=\"nx\">IfModule<\/span><span class=\"o\">&gt;<\/span>\r\n<\/pre><\/div>\r\n<\/div>\r\n<p>The details of those changes will depend on your setup, and can\r\ninclude additional things that are not Cake related. Please refer\r\nto Apache\u2019s online documentation for more information.<\/p>\r\n<\/li><li><p class=\"first\">(Optional) To improve production setup, you should prevent invalid assets\r\nfrom being parsed by CakePHP. Modify your webroot .htaccess to something like:<\/p>\r\n<div class=\"highlight-phpinline\"><div class=\"highlight\"><pre><span class=\"o\">&lt;<\/span><span class=\"nx\">IfModule<\/span> <span class=\"nx\">mod_rewrite<\/span><span class=\"o\">.<\/span><span class=\"nx\">c<\/span><span class=\"o\">&gt;<\/span>\r\n    <span class=\"nx\">RewriteEngine<\/span> <span class=\"nx\">On<\/span>\r\n    <span class=\"nx\">RewriteBase<\/span> <span class=\"o\">\/<\/span><span class=\"nx\">path<\/span><span class=\"o\">\/<\/span><span class=\"nx\">to<\/span><span class=\"o\">\/<\/span><span class=\"nx\">cake<\/span><span class=\"o\">\/<\/span><span class=\"nx\">app<\/span>\r\n    <span class=\"nx\">RewriteCond<\/span> <span class=\"o\">%<\/span><span class=\"p\">{<\/span><span class=\"nx\">REQUEST_FILENAME<\/span><span class=\"p\">}<\/span> <span class=\"o\">!-<\/span><span class=\"nx\">d<\/span>\r\n    <span class=\"nx\">RewriteCond<\/span> <span class=\"o\">%<\/span><span class=\"p\">{<\/span><span class=\"nx\">REQUEST_FILENAME<\/span><span class=\"p\">}<\/span> <span class=\"o\">!-<\/span><span class=\"nx\">f<\/span>\r\n    <span class=\"nx\">RewriteCond<\/span> <span class=\"o\">%<\/span><span class=\"p\">{<\/span><span class=\"nx\">REQUEST_URI<\/span><span class=\"p\">}<\/span> <span class=\"o\">!^\/<\/span><span class=\"p\">(<\/span><span class=\"nx\">app<\/span><span class=\"o\">\/<\/span><span class=\"nx\">webroot<\/span><span class=\"o\">\/<\/span><span class=\"p\">)<\/span><span class=\"o\">?<\/span><span class=\"p\">(<\/span><span class=\"nx\">img<\/span><span class=\"o\">|<\/span><span class=\"nx\">css<\/span><span class=\"o\">|<\/span><span class=\"nx\">js<\/span><span class=\"p\">)<\/span><span class=\"o\">\/<\/span><span class=\"p\">(<\/span><span class=\"o\">.*<\/span><span class=\"p\">)<\/span><span class=\"err\">$<\/span>\r\n    <span class=\"nx\">RewriteRule<\/span> <span class=\"o\">^<\/span><span class=\"p\">(<\/span><span class=\"o\">.*<\/span><span class=\"p\">)<\/span><span class=\"err\">$<\/span> <span class=\"nx\">index<\/span><span class=\"o\">.<\/span><span class=\"nx\">php<\/span> <span class=\"p\">[<\/span><span class=\"nx\">QSA<\/span><span class=\"p\">,<\/span><span class=\"nx\">L<\/span><span class=\"p\">]<\/span>\r\n<span class=\"o\">&lt;\/<\/span><span class=\"nx\">IfModule<\/span><span class=\"o\">&gt;<\/span>\r\n<\/pre><\/div>\r\n<\/div>\r\n<p>The above will simply prevent incorrect assets from being sent to index.php\r\nand instead display your webserver\u2019s 404 page.<\/p>\r\n<p>Additionally you can create a matching HTML 404 page, or use the default\r\nbuilt-in CakePHP 404 by adding an <tt class=\"docutils literal\"><span class=\"pre\">ErrorDocument<\/span><\/tt> directive:<\/p>\r\n<div class=\"highlight-phpinline\"><div class=\"highlight\"><pre><span class=\"nx\">ErrorDocument<\/span> <span class=\"mi\">404<\/span> <span class=\"o\">\/<\/span><span class=\"mi\">404<\/span><span class=\"o\">-<\/span><span class=\"k\">not<\/span><span class=\"o\">-<\/span><span class=\"nx\">found<\/span>\r\n<\/pre><\/div>\r\n<\/div>\r\n<\/li><\/ol>\r\n<\/div>\r\n<div class=\"section\" id=\"pretty-urls-on-nginx\">\r\n<h2>Pretty URLs on nginx<\/h2>\r\n<p>nginx is a popular server that uses less system\r\nresources than Apache. Its drawback is that it does not make use of .htaccess\r\nfiles like Apache, so it is necessary to create those\r\nrewritten URLs in the site-available configuration. Depending upon\r\nyour setup, you will have to modify this, but at the very least,\r\nyou will need PHP running as a FastCGI instance.<\/p>\r\n<div class=\"highlight-phpinline\"><div class=\"highlight\"><pre><span class=\"nx\">server<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"nx\">listen<\/span>   <span class=\"mi\">80<\/span><span class=\"p\">;<\/span>\r\n    <span class=\"nx\">server_name<\/span> <span class=\"nx\">www<\/span><span class=\"o\">.<\/span><span class=\"nx\">example<\/span><span class=\"o\">.<\/span><span class=\"nx\">com<\/span><span class=\"p\">;<\/span>\r\n    <span class=\"nx\">rewrite<\/span> <span class=\"o\">^<\/span><span class=\"p\">(<\/span><span class=\"o\">.*<\/span><span class=\"p\">)<\/span> <span class=\"nx\">http<\/span><span class=\"o\">:\/\/<\/span><span class=\"nx\">example<\/span><span class=\"o\">.<\/span><span class=\"nx\">com<\/span><span class=\"err\">$<\/span><span class=\"mi\">1<\/span> <span class=\"nx\">permanent<\/span><span class=\"p\">;<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"nx\">server<\/span> <span class=\"p\">{<\/span>\r\n    <span class=\"nx\">listen<\/span>   <span class=\"mi\">80<\/span><span class=\"p\">;<\/span>\r\n    <span class=\"nx\">server_name<\/span> <span class=\"nx\">example<\/span><span class=\"o\">.<\/span><span class=\"nx\">com<\/span><span class=\"p\">;<\/span>\r\n\r\n    <span class=\"c1\"># root directive should be global<\/span>\r\n    <span class=\"nx\">root<\/span>   <span class=\"o\">\/<\/span><span class=\"k\">var<\/span><span class=\"o\">\/<\/span><span class=\"nx\">www<\/span><span class=\"o\">\/<\/span><span class=\"nx\">example<\/span><span class=\"o\">.<\/span><span class=\"nx\">com<\/span><span class=\"o\">\/<\/span><span class=\"k\">public<\/span><span class=\"o\">\/<\/span><span class=\"nx\">app<\/span><span class=\"o\">\/<\/span><span class=\"nx\">webroot<\/span><span class=\"o\">\/<\/span><span class=\"p\">;<\/span>\r\n    <span class=\"nx\">index<\/span>  <span class=\"nx\">index<\/span><span class=\"o\">.<\/span><span class=\"nx\">php<\/span><span class=\"p\">;<\/span>\r\n\r\n    <span class=\"nx\">access_log<\/span> <span class=\"o\">\/<\/span><span class=\"k\">var<\/span><span class=\"o\">\/<\/span><span class=\"nx\">www<\/span><span class=\"o\">\/<\/span><span class=\"nx\">example<\/span><span class=\"o\">.<\/span><span class=\"nx\">com<\/span><span class=\"o\">\/<\/span><span class=\"nb\">log<\/span><span class=\"o\">\/<\/span><span class=\"nx\">access<\/span><span class=\"o\">.<\/span><span class=\"nb\">log<\/span><span class=\"p\">;<\/span>\r\n    <span class=\"nb\">error_log<\/span> <span class=\"o\">\/<\/span><span class=\"k\">var<\/span><span class=\"o\">\/<\/span><span class=\"nx\">www<\/span><span class=\"o\">\/<\/span><span class=\"nx\">example<\/span><span class=\"o\">.<\/span><span class=\"nx\">com<\/span><span class=\"o\">\/<\/span><span class=\"nb\">log<\/span><span class=\"o\">\/<\/span><span class=\"nx\">error<\/span><span class=\"o\">.<\/span><span class=\"nb\">log<\/span><span class=\"p\">;<\/span>\r\n\r\n    <span class=\"nx\">location<\/span> <span class=\"o\">\/<\/span> <span class=\"p\">{<\/span>\r\n        <span class=\"nx\">try_files<\/span> <span class=\"nv\">$uri<\/span> <span class=\"nv\">$uri<\/span><span class=\"o\">\/<\/span> <span class=\"o\">\/<\/span><span class=\"nx\">index<\/span><span class=\"o\">.<\/span><span class=\"nx\">php<\/span><span class=\"o\">?<\/span><span class=\"nv\">$uri<\/span><span class=\"o\">&amp;<\/span><span class=\"nv\">$args<\/span><span class=\"p\">;<\/span>\r\n    <span class=\"p\">}<\/span>\r\n\r\n    <span class=\"nx\">location<\/span> <span class=\"o\">~<\/span> <span class=\"nx\">\\<\/span><span class=\"o\">.<\/span><span class=\"nx\">php<\/span><span class=\"err\">$<\/span> <span class=\"p\">{<\/span>\r\n        <span class=\"nx\">try_files<\/span> <span class=\"nv\">$uri<\/span> <span class=\"o\">=<\/span><span class=\"mi\">404<\/span><span class=\"p\">;<\/span>\r\n        <span class=\"k\">include<\/span> <span class=\"o\">\/<\/span><span class=\"nx\">etc<\/span><span class=\"o\">\/<\/span><span class=\"nx\">nginx<\/span><span class=\"o\">\/<\/span><span class=\"nx\">fastcgi_params<\/span><span class=\"p\">;<\/span>\r\n        <span class=\"nx\">fastcgi_pass<\/span>    <span class=\"mf\">127.0<\/span><span class=\"o\">.<\/span><span class=\"mf\">0.1<\/span><span class=\"o\">:<\/span><span class=\"mi\">9000<\/span><span class=\"p\">;<\/span>\r\n        <span class=\"nx\">fastcgi_index<\/span>   <span class=\"nx\">index<\/span><span class=\"o\">.<\/span><span class=\"nx\">php<\/span><span class=\"p\">;<\/span>\r\n        <span class=\"nx\">fastcgi_param<\/span> <span class=\"nx\">SCRIPT_FILENAME<\/span> <span class=\"nv\">$document_root$fastcgi_script_name<\/span><span class=\"p\">;<\/span>\r\n    <span class=\"p\">}<\/span>\r\n<span class=\"p\">}<\/span>\r\n<\/pre><\/div>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>URL Rewrites on IIS7 (Windows hosts)<a class=\"headerlink\" href=\"http:\/\/book.cakephp.org\/2.0\/en\/installation\/url-rewriting.html#url-rewrites-on-iis7-windows-hosts\" title=\"Permalink to this headline\">\u00b6<\/a><\/h2>\r\n<p>IIS7 does not natively support .htaccess files. While there are\r\nadd-ons that can add this support, you can also import htaccess\r\nrules into IIS to use CakePHP\u2019s native rewrites. To do this, follow\r\nthese steps:<\/p>\r\n","section_id":null,"is_publish":null},{"id":"64","created_by":"1","modified_by":"1","created":"2013-07-09 10:14:37","modified":"2013-07-09 10:15:08","deleted":"0","revision":null,"flags":null,"owned_by":"1","title":"Getting Started","note":"<h1>Getting Started<\/h1>\r\n<p>The CakePHP framework provides a robust base for your application.\r\nIt can handle every aspect, from the user\u2019s initial request all the\r\nway to the final rendering of a web page. And since the framework\r\nfollows the principles of MVC, it allows you to easily customize\r\nand extend most aspects of your application.<\/p>\r\n<p>The framework also provides a basic organizational structure, from\r\nfilenames to database table names, keeping your entire application\r\nconsistent and logical. This concept is simple but powerful. Follow\r\nthe conventions and you\u2019ll always know exactly where things are and\r\nhow they\u2019re organized.<\/p>\r\n<p>The best way to experience and learn CakePHP is to sit down and build something.\r\nTo start off we\u2019ll build a simple blog application.<\/p>\r\n\r\n<h2>Blog Tutorial<\/h2>\r\n<p>Welcome to CakePHP. You\u2019re probably checking out this tutorial\r\nbecause you want to learn more about how CakePHP works. It\u2019s our\r\naim to increase productivity and make coding more enjoyable: we\r\nhope you\u2019ll see this as you dive into the code.<\/p>\r\n<p>This tutorial will walk you through the creation of a simple blog\r\napplication. We\u2019ll be getting and installing Cake, creating and\r\nconfiguring a database, and creating enough application logic to\r\nlist, add, edit, and delete blog posts.<\/p>\r\n<p>Here\u2019s what you\u2019ll need:<\/p>\r\n<ol class=\"arabic simple\"><li>A running web server. We\u2019re going to assume you\u2019re using Apache,\r\nthough the instructions for using other servers should be very\r\nsimilar. We might have to play a little with the server\r\nconfiguration, but most folks can get Cake up and running without\r\nany configuration at all. Make sure you have PHP 5.2.8 or greater.<\/li><li>A database server. We\u2019re going to be using MySQL server in this\r\ntutorial. You\u2019ll need to know enough about SQL in order to create a\r\ndatabase: Cake will be taking the reins from there.  Since we\u2019re using MySQL,\r\nalso make sure that you have <tt class=\"docutils literal\"><span class=\"pre\">pdo_mysql<\/span><\/tt> enabled in PHP.<\/li><li>Basic PHP knowledge. The more object-oriented programming you\u2019ve\r\ndone, the better: but fear not if you\u2019re a procedural fan.<\/li><li>Finally, you\u2019ll need a basic knowledge of the MVC programming\r\npattern. A quick overview can be found in <a class=\"reference internal\" href=\"http:\/\/book.cakephp.org\/2.0\/en\/cakephp-overview\/understanding-model-view-controller.html\"><em>Understanding Model-View-Controller<\/em><\/a>.\r\nDon\u2019t worry, it\u2019s only a half a page or so.<\/li><\/ol>\r\n<p>Let\u2019s get started!<\/p>\r\n<div class=\"section\" id=\"getting-cake\">\r\n<h3>Getting Cake<\/h3>\r\n<p>First, let\u2019s get a copy of fresh Cake code.<\/p>\r\n<p>To get a fresh download, visit the CakePHP project on GitHub:\r\n<a class=\"reference external\" href=\"https:\/\/github.com\/cakephp\/cakephp\/tags\">https:\/\/github.com\/cakephp\/cakephp\/tags<\/a>\r\nand download the latest release of 2.0<\/p>\r\n<p>You can also clone the repository using\r\n<a class=\"reference external\" href=\"http:\/\/git-scm.com\/\">git<\/a>.\r\n<tt class=\"docutils literal\"><span class=\"pre\">git<\/span> <span class=\"pre\">clone<\/span> <span class=\"pre\">git:\/\/github.com\/cakephp\/cakephp.git<\/span><\/tt><\/p>\r\n<p>Regardless of how you downloaded it, place the code inside of your\r\nDocumentRoot. Once finished, your directory setup should look\r\nsomething like the following:<\/p>\r\n<div class=\"highlight-phpinline\"><div class=\"highlight\"><pre><span class=\"o\">\/<\/span><span class=\"nx\">path_to_document_root<\/span>\r\n    <span class=\"o\">\/<\/span><span class=\"nx\">app<\/span>\r\n    <span class=\"o\">\/<\/span><span class=\"nx\">lib<\/span>\r\n    <span class=\"o\">\/<\/span><span class=\"nx\">plugins<\/span>\r\n    <span class=\"o\">\/<\/span><span class=\"nx\">vendors<\/span>\r\n    <span class=\"o\">.<\/span><span class=\"nx\">htaccess<\/span>\r\n    <span class=\"nx\">index<\/span><span class=\"o\">.<\/span><span class=\"nx\">php<\/span>\r\n    <span class=\"nx\">README<\/span>\r\n<\/pre><\/div>\r\n<\/div>\r\n<p>Now might be a good time to learn a bit about how Cake\u2019s directory\r\nstructure works: check out\r\n<a class=\"reference internal\" href=\"http:\/\/book.cakephp.org\/2.0\/en\/getting-started\/cakephp-folder-structure.html\"><em>CakePHP Folder Structure<\/em><\/a> section.<\/p>\r\n<\/div>\r\n<div class=\"section\" id=\"creating-the-blog-database\">\r\n<h3>Creating the Blog Database<\/h3>\r\n<p>Next, let\u2019s set up the underlying database for our blog. If you\r\nhaven\u2019t already done so, create an empty database for use in this\r\ntutorial, with a name of your choice. Right now, we\u2019ll just create\r\na single table to store our posts. We\u2019ll also throw in a few posts\r\nright now to use for testing purposes. Execute the following SQL\r\nstatements into your database:<\/p>\r\n<div class=\"highlight-phpinline\"><div class=\"highlight\"><pre><span class=\"cm\">\/* First, create our posts table: *\/<\/span>\r\n<span class=\"nx\">CREATE<\/span> <span class=\"nx\">TABLE<\/span> <span class=\"nx\">posts<\/span> <span class=\"p\">(<\/span>\r\n    <span class=\"nx\">id<\/span> <span class=\"nx\">INT<\/span> <span class=\"nx\">UNSIGNED<\/span> <span class=\"nx\">AUTO_INCREMENT<\/span> <span class=\"nx\">PRIMARY<\/span> <span class=\"nx\">KEY<\/span><span class=\"p\">,<\/span>\r\n    <span class=\"nx\">title<\/span> <span class=\"nx\">VARCHAR<\/span><span class=\"p\">(<\/span><span class=\"mi\">50<\/span><span class=\"p\">),<\/span>\r\n    <span class=\"nx\">body<\/span> <span class=\"nx\">TEXT<\/span><span class=\"p\">,<\/span>\r\n    <span class=\"nx\">created<\/span> <span class=\"nx\">DATETIME<\/span> <span class=\"k\">DEFAULT<\/span> <span class=\"k\">NULL<\/span><span class=\"p\">,<\/span>\r\n    <span class=\"nx\">modified<\/span> <span class=\"nx\">DATETIME<\/span> <span class=\"k\">DEFAULT<\/span> <span class=\"k\">NULL<\/span>\r\n<span class=\"p\">);<\/span>\r\n\r\n<span class=\"cm\">\/* Then insert some posts for testing: *\/<\/span>\r\n<span class=\"nx\">INSERT<\/span> <span class=\"nx\">INTO<\/span> <span class=\"nx\">posts<\/span> <span class=\"p\">(<\/span><span class=\"nx\">title<\/span><span class=\"p\">,<\/span><span class=\"nx\">body<\/span><span class=\"p\">,<\/span><span class=\"nx\">created<\/span><span class=\"p\">)<\/span>\r\n    <span class=\"nx\">VALUES<\/span> <span class=\"p\">(<\/span><span class=\"s1\">'The title'<\/span><span class=\"p\">,<\/span> <span class=\"s1\">'This is the post body.'<\/span><span class=\"p\">,<\/span> <span class=\"nx\">NOW<\/span><span class=\"p\">());<\/span>\r\n<span class=\"nx\">INSERT<\/span> <span class=\"nx\">INTO<\/span> <span class=\"nx\">posts<\/span> <span class=\"p\">(<\/span><span class=\"nx\">title<\/span><span class=\"p\">,<\/span><span class=\"nx\">body<\/span><span class=\"p\">,<\/span><span class=\"nx\">created<\/span><span class=\"p\">)<\/span>\r\n    <span class=\"nx\">VALUES<\/span> <span class=\"p\">(<\/span><span class=\"s1\">'A title once again'<\/span><span class=\"p\">,<\/span> <span class=\"s1\">'And the post body follows.'<\/span><span class=\"p\">,<\/span> <span class=\"nx\">NOW<\/span><span class=\"p\">());<\/span>\r\n<span class=\"nx\">INSERT<\/span> <span class=\"nx\">INTO<\/span> <span class=\"nx\">posts<\/span> <span class=\"p\">(<\/span><span class=\"nx\">title<\/span><span class=\"p\">,<\/span><span class=\"nx\">body<\/span><span class=\"p\">,<\/span><span class=\"nx\">created<\/span><span class=\"p\">)<\/span>\r\n    <span class=\"nx\">VALUES<\/span> <span class=\"p\">(<\/span><span class=\"s1\">'Title strikes back'<\/span><span class=\"p\">,<\/span> <span class=\"s1\">'This is really exciting! Not.'<\/span><span class=\"p\">,<\/span> <span class=\"nx\">NOW<\/span><span class=\"p\">());<\/span>\r\n<\/pre><\/div>\r\n<\/div>\r\n<p>The choices on table and column names are not arbitrary. If you\r\nfollow Cake\u2019s database naming conventions, and Cake\u2019s class naming\r\nconventions (both outlined in\r\n<a class=\"reference internal\" href=\"http:\/\/book.cakephp.org\/2.0\/en\/getting-started\/cakephp-conventions.html\"><em>CakePHP Conventions<\/em><\/a>), you\u2019ll be able to take\r\nadvantage of a lot of free functionality and avoid configuration.\r\nCake is flexible enough to accommodate even the worst legacy\r\ndatabase schema, but adhering to convention will save you time.<\/p>\r\n<p>Check out <a class=\"reference internal\" href=\"http:\/\/book.cakephp.org\/2.0\/en\/getting-started\/cakephp-conventions.html\"><em>CakePHP Conventions<\/em><\/a> for more\r\ninformation, but suffice it to say that naming our table \u2018posts\u2019\r\nautomatically hooks it to our Post model, and having fields called\r\n\u2018modified\u2019 and \u2018created\u2019 will be automagically managed by Cake.<\/p>\r\n<\/div>\r\n<div class=\"section\" id=\"cake-database-configuration\">\r\n<h3>Cake Database Configuration<\/h3>\r\n<p>Onward and upward: let\u2019s tell Cake where our database is and how to\r\nconnect to it. For many, this is the first and last time you\r\nconfigure anything.<\/p>\r\n<p>A copy of CakePHP\u2019s database configuration file is found in\r\n<tt class=\"docutils literal\"><span class=\"pre\">\/app\/Config\/database.php.default<\/span><\/tt>. Make a copy of this file in\r\nthe same directory, but name it <tt class=\"docutils literal\"><span class=\"pre\">database.php<\/span><\/tt>.<\/p>\r\n<p>The config file should be pretty straightforward: just replace the\r\nvalues in the <tt class=\"docutils literal\"><span class=\"pre\">$default<\/span><\/tt> array with those that apply to your\r\nsetup. A sample completed configuration array might look something\r\nlike the following:<\/p>\r\n<div class=\"highlight-phpinline\"><div class=\"highlight\"><pre><span class=\"k\">public<\/span> <span class=\"nv\">$default<\/span> <span class=\"o\">=<\/span> <span class=\"k\">array<\/span><span class=\"p\">(<\/span>\r\n    <span class=\"s1\">'datasource'<\/span> <span class=\"o\">=&gt;<\/span> <span class=\"s1\">'Database\/Mysql'<\/span><span class=\"p\">,<\/span>\r\n    <span class=\"s1\">'persistent'<\/span> <span class=\"o\">=&gt;<\/span> <span class=\"k\">false<\/span><span class=\"p\">,<\/span>\r\n    <span class=\"s1\">'host'<\/span> <span class=\"o\">=&gt;<\/span> <span class=\"s1\">'localhost'<\/span><span class=\"p\">,<\/span>\r\n    <span class=\"s1\">'port'<\/span> <span class=\"o\">=&gt;<\/span> <span class=\"s1\">''<\/span><span class=\"p\">,<\/span>\r\n    <span class=\"s1\">'login'<\/span> <span class=\"o\">=&gt;<\/span> <span class=\"s1\">'cakeBlog'<\/span><span class=\"p\">,<\/span>\r\n    <span class=\"s1\">'password'<\/span> <span class=\"o\">=&gt;<\/span> <span class=\"s1\">'c4k3-rUl3Z'<\/span><span class=\"p\">,<\/span>\r\n    <span class=\"s1\">'database'<\/span> <span class=\"o\">=&gt;<\/span> <span class=\"s1\">'cake_blog_tutorial'<\/span><span class=\"p\">,<\/span>\r\n    <span class=\"s1\">'schema'<\/span> <span class=\"o\">=&gt;<\/span> <span class=\"s1\">''<\/span><span class=\"p\">,<\/span>\r\n    <span class=\"s1\">'prefix'<\/span> <span class=\"o\">=&gt;<\/span> <span class=\"s1\">''<\/span><span class=\"p\">,<\/span>\r\n    <span class=\"s1\">'encoding'<\/span> <span class=\"o\">=&gt;<\/span> <span class=\"s1\">''<\/span>\r\n<span class=\"p\">);<\/span>\r\n<\/pre><\/div>\r\n<\/div>\r\n<p>Once you\u2019ve saved your new <tt class=\"docutils literal\"><span class=\"pre\">database.php<\/span><\/tt> file, you should be\r\nable to open your browser and see the Cake welcome page. It should\r\nalso tell you that your database connection file was found, and\r\nthat Cake can successfully connect to the database.<\/p>\r\n<div class=\"admonition note\">\r\n<p class=\"first admonition-title\">Note<\/p>\r\n<p class=\"last\">Remember that you\u2019ll need to have PDO, and pdo_mysql enabled in\r\nyour php.ini.<\/p>\r\n<\/div>\r\n<\/div>\r\n<div class=\"section\" id=\"optional-configuration\">\r\n<h3>Optional Configuration<\/h3>\r\n<p>There are three other items that can be configured. Most developers\r\ncomplete these laundry-list items, but they\u2019re not required for\r\nthis tutorial. One is defining a custom string (or \u201csalt\u201d) for use\r\nin security hashes. The second is defining a custom number (or\r\n\u201cseed\u201d) for use in encryption. The third item is allowing CakePHP\r\nwrite access to its <tt class=\"docutils literal\"><span class=\"pre\">tmp<\/span><\/tt> folder.<\/p>\r\n<p>The security salt is used for generating hashes. Change the default\r\nsalt value by editing <tt class=\"docutils literal\"><span class=\"pre\">\/app\/Config\/core.php<\/span><\/tt> line 187. It doesn\u2019t\r\nmuch matter what the new value is, as long as it\u2019s not easily\r\nguessed:<\/p>\r\n<div class=\"highlight-phpinline\"><div class=\"highlight\"><pre><span class=\"sd\">\/**<\/span>\r\n<span class=\"sd\"> * A random string used in security hashing methods.<\/span>\r\n<span class=\"sd\"> *\/<\/span>\r\n<span class=\"nx\">Configure<\/span><span class=\"o\">::<\/span><span class=\"na\">write<\/span><span class=\"p\">(<\/span><span class=\"s1\">'Security.salt'<\/span><span class=\"p\">,<\/span> <span class=\"s1\">'pl345e-P45s_7h3*S@l7!'<\/span><span class=\"p\">);<\/span>\r\n<\/pre><\/div>\r\n<\/div>\r\n<p>The cipher seed is used for encrypt\/decrypt strings. Change the\r\ndefault seed value by editing <tt class=\"docutils literal\"><span class=\"pre\">\/app\/Config\/core.php<\/span><\/tt> line 192. It\r\ndoesn\u2019t much matter what the new value is, as long as it\u2019s not\r\neasily guessed:<\/p>\r\n<div class=\"highlight-phpinline\"><div class=\"highlight\"><pre><span class=\"sd\">\/**<\/span>\r\n<span class=\"sd\"> * A random numeric string (digits only) used to encrypt\/decrypt strings.<\/span>\r\n<span class=\"sd\"> *\/<\/span>\r\n<span class=\"nx\">Configure<\/span><span class=\"o\">::<\/span><span class=\"na\">write<\/span><span class=\"p\">(<\/span><span class=\"s1\">'Security.cipherSeed'<\/span><span class=\"p\">,<\/span> <span class=\"s1\">'7485712659625147843639846751'<\/span><span class=\"p\">);<\/span>\r\n<\/pre><\/div>\r\n<\/div>\r\n<p>The final task is to make the <tt class=\"docutils literal\"><span class=\"pre\">app\/tmp<\/span><\/tt> directory web-writable.\r\nThe best way to do this is to find out what user your webserver\r\nruns as (<tt class=\"docutils literal\"><span class=\"pre\">&lt;?php<\/span> <span class=\"pre\">echo<\/span> <span class=\"pre\">`whoami`;<\/span> <span class=\"pre\">?&gt;<\/span><\/tt>) and change the ownership of\r\nthe <tt class=\"docutils literal\"><span class=\"pre\">app\/tmp<\/span><\/tt> directory to that user. The final command you run\r\n(in *nix) might look something like this:<\/p>\r\n<div class=\"highlight-phpinline\"><div class=\"highlight\"><pre><span class=\"err\">$<\/span> <span class=\"nb\">chown<\/span> <span class=\"o\">-<\/span><span class=\"nx\">R<\/span> <span class=\"nx\">www<\/span><span class=\"o\">-<\/span><span class=\"nx\">data<\/span> <span class=\"nx\">app<\/span><span class=\"o\">\/<\/span><span class=\"nx\">tmp<\/span>\r\n<\/pre><\/div>\r\n<\/div>\r\n<p>If for some reason CakePHP can\u2019t write to that directory, you\u2019ll be\r\ninformed by a warning while not in production mode.<\/p>\r\n<\/div>","section_id":null,"is_publish":null},{"id":"65","created_by":"1","modified_by":null,"created":"2013-07-09 10:16:06","modified":null,"deleted":"0","revision":null,"flags":null,"owned_by":"1","title":"A Typical CakePHP Request","note":"\r\n\r\n<div id=\"container\"><br><div class=\"content row\"><div class=\"document columns nine push-three\"><div class=\"body\"><div class=\"section\" id=\"a-typical-cakephp-request\">\r\n<p>We\u2019ve covered the basic ingredients in CakePHP, so let\u2019s look at\r\nhow objects work together to complete a basic request. Continuing\r\nwith our original request example, let\u2019s imagine that our friend\r\nRicardo just clicked on the \u201cBuy A Custom Cake Now!\u201d link on a\r\nCakePHP application\u2019s landing page.<\/p>\r\n<div class=\"figure align-center\">\r\n<img alt=\"Flow diagram showing a typical CakePHP request\" src=\"http:\/\/book.cakephp.org\/2.0\/en\/_images\/typical-cake-request.png\">\r\n<p class=\"caption\">Flow diagram showing a typical CakePHP request<\/p>\r\n<\/div>\r\n<p>Figure: 2. Typical Cake Request.<\/p>\r\n<p>Black = required element, Gray = optional element, Blue = callback<\/p>\r\n<ol class=\"arabic simple\"><li>Ricardo clicks the link pointing to\r\n<a class=\"reference external\" href=\"http:\/\/www.example.com\/cakes\/buy\">http:\/\/www.example.com\/cakes\/buy<\/a>, and his browser makes a request\r\nto your web server.<\/li><li>The Router parses the URL in order to extract the parameters for\r\nthis request: the controller, action, and any other arguments that\r\nwill affect the business logic during this request.<\/li><li>Using routes, a request URL is mapped to a controller action (a\r\nmethod in a specific controller class). In this case, it\u2019s the\r\nbuy() method of the CakesController. The controller\u2019s\r\nbeforeFilter() callback is called before any controller action\r\nlogic is executed.<\/li><li>The controller may use models to gain access to the\r\napplication\u2019s data. In this example, the controller uses a model to\r\nfetch Ricardo\u2019s last purchases from the database. Any applicable\r\nmodel callbacks, behaviors, and DataSources may apply during this\r\noperation. While model usage is not required, all CakePHP\r\ncontrollers initially require at least one model.<\/li><li>After the model has retrieved the data, it is returned to the\r\ncontroller. Model callbacks may apply.<\/li><li>The controller may use components to further refine the data or\r\nperform other operations (session manipulation, authentication, or\r\nsending emails, for example).<\/li><li>Once the controller has used models and components to prepare\r\nthe data sufficiently, that data is handed to the view using the\r\ncontroller\u2019s set() method. Controller callbacks may be applied\r\nbefore the data is sent. The view logic is performed, which may\r\ninclude the use of elements and\/or helpers. By default, the view is\r\nrendered inside of a layout.<\/li><li>Additional controller callbacks (like afterFilter) may be\r\napplied. The complete, rendered view code is sent to Ricardo\u2019s\r\nbrowser.<\/li><\/ol><\/div><\/div><\/div><\/div><\/div><div id=\"nav-modal\" class=\"reveal-modal\"> <\/div>\r\n\r\n\r\n  \r\n","section_id":null,"is_publish":null},{"id":"66","created_by":"1","modified_by":null,"created":"2013-07-09 10:16:40","modified":null,"deleted":"0","revision":null,"flags":null,"owned_by":"1","title":"CakePHP Conventions","note":"\r\n\r\n<div id=\"container\"><br><div class=\"content row\"><div class=\"document columns nine push-three\"><div class=\"body\"><div class=\"section\" id=\"cakephp-conventions\">\r\n<p>We are big fans of convention over configuration. While it takes a\r\nbit of time to learn CakePHP\u2019s conventions, you save time in the\r\nlong run: by following convention, you get free functionality, and\r\nyou free yourself from the maintenance nightmare of tracking config\r\nfiles. Convention also makes for a very uniform system development,\r\nallowing other developers to jump in and help more easily.<\/p>\r\n<p>CakePHP\u2019s conventions have been distilled out of years of web\r\ndevelopment experience and best practices. While we suggest you use\r\nthese conventions while developing with CakePHP, we should mention\r\nthat many of these tenets are easily overridden \u2013 something that is\r\nespecially handy when working with legacy systems.<\/p>\r\n<div class=\"section\" id=\"controller-conventions\">\r\n<h2>Controller Conventions<\/h2>\r\n<p>Controller classnames are plural, CamelCased, and end in\r\n<tt class=\"docutils literal\"><span class=\"pre\">Controller<\/span><\/tt>. <tt class=\"docutils literal\"><span class=\"pre\">PeopleController<\/span><\/tt> and\r\n<tt class=\"docutils literal\"><span class=\"pre\">LatestArticlesController<\/span><\/tt> are both examples of conventional\r\ncontroller names.<\/p>\r\n<p>The first method you write for a controller might be the\r\n<tt class=\"docutils literal\"><span class=\"pre\">index()<\/span><\/tt> method. When a request specifies a controller but not\r\nan action, the default CakePHP behavior is to execute the\r\n<tt class=\"docutils literal\"><span class=\"pre\">index()<\/span><\/tt> method of that controller. For example, a request for\r\n<a class=\"reference external\" href=\"http:\/\/www.example.com\/apples\/\">http:\/\/www.example.com\/apples\/<\/a> maps to a call on the <tt class=\"docutils literal\"><span class=\"pre\">index()<\/span><\/tt>\r\nmethod of the <tt class=\"docutils literal\"><span class=\"pre\">ApplesController<\/span><\/tt>, whereas\r\n<a class=\"reference external\" href=\"http:\/\/www.example.com\/apples\/view\/\">http:\/\/www.example.com\/apples\/view\/<\/a> maps to a call on the\r\n<tt class=\"docutils literal\"><span class=\"pre\">view()<\/span><\/tt> method of the <tt class=\"docutils literal\"><span class=\"pre\">ApplesController<\/span><\/tt>.<\/p>\r\n<p>You can also change the visibility of controller methods in CakePHP\r\nby prefixing controller method names with underscores. If a\r\ncontroller method has been prefixed with an underscore, the method\r\nwill not be accessible directly from the web but is available for\r\ninternal use. For example:<\/p>\r\n<div class=\"highlight-phpinline\"><div class=\"highlight\"><pre><span class=\"k\">class<\/span> <span class=\"nc\">NewsController<\/span> <span class=\"k\">extends<\/span> <span class=\"nx\">AppController<\/span> <span class=\"p\">{<\/span>\r\n\r\n    <span class=\"k\">public<\/span> <span class=\"k\">function<\/span> <span class=\"nf\">latest<\/span><span class=\"p\">()<\/span> <span class=\"p\">{<\/span>\r\n        <span class=\"nv\">$this<\/span><span class=\"o\">-&gt;<\/span><span class=\"na\">_findNewArticles<\/span><span class=\"p\">();<\/span>\r\n    <span class=\"p\">}<\/span>\r\n\r\n    <span class=\"k\">protected<\/span> <span class=\"k\">function<\/span> <span class=\"nf\">_findNewArticles<\/span><span class=\"p\">()<\/span> <span class=\"p\">{<\/span>\r\n        <span class=\"c1\">\/\/ Logic to find latest news articles<\/span>\r\n    <span class=\"p\">}<\/span>\r\n<span class=\"p\">}<\/span>\r\n<\/pre><\/div>\r\n<\/div>\r\n<p>While the page <a class=\"reference external\" href=\"http:\/\/www.example.com\/news\/latest\/\">http:\/\/www.example.com\/news\/latest\/<\/a> would be\r\naccessible to the user as usual, someone trying to get to the page\r\n<a class=\"reference external\" href=\"http:\/\/www.example.com\/news\/_findNewArticles\/\">http:\/\/www.example.com\/news\/_findNewArticles\/<\/a> would get an error,\r\nbecause the method is preceded with an underscore. You can also use\r\nPHP\u2019s visibility keywords to indicate whether or not a method can be\r\naccessed from a url. Non-public methods cannot be accessed.<\/p>\r\n<div class=\"section\" id=\"url-considerations-for-controller-names\">\r\n<h3>URL Considerations for Controller Names<\/h3>\r\n<p>As you\u2019ve just seen, single word controllers map easily to a simple\r\nlower case URL path. For example, <tt class=\"docutils literal\"><span class=\"pre\">ApplesController<\/span><\/tt> (which would\r\nbe defined in the file name \u2018ApplesController.php\u2019) is accessed\r\nfrom <a class=\"reference external\" href=\"http:\/\/example.com\/apples\">http:\/\/example.com\/apples<\/a>.<\/p>\r\n<p>Multiple word controllers <em>can<\/em> be any \u2018inflected\u2019 form which\r\nequals the controller name so:<\/p>\r\n<ul class=\"simple\"><li>\/redApples<\/li><li>\/RedApples<\/li><li>\/Red_apples<\/li><li>\/red_apples<\/li><\/ul>\r\n<p>will all resolve to the index of the RedApples controller. However,\r\nthe convention is that your urls are lowercase and underscored,\r\ntherefore \/red_apples\/go_pick is the correct form to access the\r\n<tt class=\"docutils literal\"><span class=\"pre\">RedApplesController::go_pick<\/span><\/tt> action.<\/p>\r\n<p>For more information on CakePHP URLs and parameter handling, see\r\n<a class=\"reference internal\" href=\"http:\/\/book.cakephp.org\/2.0\/en\/development\/routing.html#routes-configuration\"><em>Routes Configuration<\/em><\/a>.<\/p>\r\n<\/div>\r\n<\/div>\r\n<div class=\"section\" id=\"file-and-classname-conventions\">\r\n<span id=\"id1\"><\/span><h2>File and Classname Conventions<\/h2>\r\n<p>In general, filenames match the classnames, which are\r\nCamelCased. So if you have a class <strong>MyNiftyClass<\/strong>, then in Cake,\r\nthe file should be named <strong>MyNiftyClass.php<\/strong>. Below are\r\nexamples of how to name the file for each of the different types of\r\nclasses you would typically use in a CakePHP application:<\/p>\r\n<ul class=\"simple\"><li>The Controller class <strong>KissesAndHugsController<\/strong> would be found\r\nin a file named <strong>KissesAndHugsController.php<\/strong><\/li><li>The Component class <strong>MyHandyComponent<\/strong> would be found in a\r\nfile named <strong>MyHandyComponent.php<\/strong><\/li><li>The Model class <strong>OptionValue<\/strong> would be found in a file named\r\n<strong>OptionValue.php<\/strong><\/li><li>The Behavior class <strong>EspeciallyFunkableBehavior<\/strong> would be found\r\nin a file named <strong>EspeciallyFunkableBehavior.php<\/strong><\/li><li>The View class <strong>SuperSimpleView<\/strong> would be found in a file\r\nnamed <strong>SuperSimpleView.php<\/strong><\/li><li>The Helper class <strong>BestEverHelper<\/strong> would be found in a file\r\nnamed <strong>BestEverHelper.php<\/strong><\/li><\/ul>\r\n<p>Each file would be located in the appropriate folder in your app folder.<\/p>\r\n<\/div>\r\n<div class=\"section\" id=\"model-and-database-conventions\">\r\n<h2>Model and Database Conventions<\/h2>\r\n<p>Model classnames are singular and CamelCased. Person, BigPerson,\r\nand ReallyBigPerson are all examples of conventional model names.<\/p>\r\n<p>Table names corresponding to CakePHP models are plural and\r\nunderscored. The underlying tables for the above mentioned models\r\nwould be <tt class=\"docutils literal\"><span class=\"pre\">people<\/span><\/tt>, <tt class=\"docutils literal\"><span class=\"pre\">big_people<\/span><\/tt>, and <tt class=\"docutils literal\"><span class=\"pre\">really_big_people<\/span><\/tt>,\r\nrespectively.<\/p>\r\n<p>You can use the utility library <a class=\"reference internal\" href=\"http:\/\/book.cakephp.org\/2.0\/en\/core-utility-libraries\/inflector.html#Inflector\" title=\"Inflector\"><tt class=\"xref php php-class docutils literal\"><span class=\"pre\">Inflector<\/span><\/tt><\/a> to check the\r\nsingular\/plural of words. See the\r\n<a class=\"reference internal\" href=\"http:\/\/book.cakephp.org\/2.0\/en\/core-utility-libraries\/inflector.html\"><em>Inflector<\/em><\/a> for more\r\ninformation.<\/p>\r\n<p>Field names with two or more words are underscored like,\r\nfirst_name.<\/p>\r\n<p>Foreign keys in hasMany, belongsTo or hasOne relationships are\r\nrecognized by default as the (singular) name of the related table\r\nfollowed by _id. So if a Baker hasMany Cake, the cakes table will\r\nrefer to the bakers table via a baker_id foreign key. For a\r\nmultiple worded table like category_types, the foreign key would\r\nbe category_type_id.<\/p>\r\n<p>Join tables, used in hasAndBelongsToMany (HABTM) relationships\r\nbetween models should be named after the model tables they will\r\njoin in alphabetical order (apples_zebras rather than\r\nzebras_apples).<\/p>\r\n<p>All tables with which CakePHP models interact (with the exception\r\nof join tables), require a singular primary key to uniquely\r\nidentify each row. If you wish to model a table which does not have\r\na single-field primary key, CakePHP\u2019s convention is that a\r\nsingle-field primary key is added to the table. You have to add a\r\nsingle-field primary key if you want to use that table\u2019s model.<\/p>\r\n<p>CakePHP does not support composite primary keys. If you want to\r\ndirectly manipulate your join table data, use direct\r\n<a class=\"reference internal\" href=\"http:\/\/book.cakephp.org\/2.0\/en\/models\/retrieving-your-data.html#model-query\"><em>query<\/em><\/a> calls or add a primary key to act on it\r\nas a normal model. E.g.:<\/p>\r\n<div class=\"highlight-phpinline\"><div class=\"highlight\"><pre><span class=\"nx\">CREATE<\/span> <span class=\"nx\">TABLE<\/span> <span class=\"nx\">posts_tags<\/span> <span class=\"p\">(<\/span>\r\n<span class=\"nx\">id<\/span> <span class=\"nx\">INT<\/span><span class=\"p\">(<\/span><span class=\"mi\">10<\/span><span class=\"p\">)<\/span> <span class=\"k\">NOT<\/span> <span class=\"k\">NULL<\/span> <span class=\"nx\">AUTO_INCREMENT<\/span><span class=\"p\">,<\/span>\r\n<span class=\"nx\">post_id<\/span> <span class=\"nx\">INT<\/span><span class=\"p\">(<\/span><span class=\"mi\">10<\/span><span class=\"p\">)<\/span> <span class=\"k\">NOT<\/span> <span class=\"k\">NULL<\/span><span class=\"p\">,<\/span>\r\n<span class=\"nx\">tag_id<\/span> <span class=\"nx\">INT<\/span><span class=\"p\">(<\/span><span class=\"mi\">10<\/span><span class=\"p\">)<\/span> <span class=\"k\">NOT<\/span> <span class=\"k\">NULL<\/span><span class=\"p\">,<\/span>\r\n<span class=\"nx\">PRIMARY<\/span> <span class=\"nx\">KEY<\/span><span class=\"p\">(<\/span><span class=\"nx\">id<\/span><span class=\"p\">));<\/span>\r\n<\/pre><\/div>\r\n<\/div>\r\n<p>Rather than using an auto-increment key as the primary key, you may\r\nalso use char(36). Cake will then use a unique 36 character uuid\r\n(String::uuid) whenever you save a new record using the Model::save\r\nmethod.<\/p>\r\n<\/div>\r\n<div class=\"section\" id=\"view-conventions\">\r\n<h2>View Conventions<\/h2>\r\n<p>View template files are named after the controller functions they\r\ndisplay, in an underscored form. The getReady() function of the\r\nPeopleController class will look for a view template in\r\n\/app\/View\/People\/get_ready.ctp.<\/p>\r\n<p>The basic pattern is\r\n\/app\/View\/Controller\/underscored_function_name.ctp.<\/p>\r\n<p>By naming the pieces of your application using CakePHP conventions,\r\nyou gain functionality without the hassle and maintenance tethers\r\nof configuration. Here\u2019s a final example that ties the conventions<\/p>\r\n<ul class=\"simple\"><li>Database table: \u201cpeople\u201d<\/li><li>Model class: \u201cPerson\u201d, found at \/app\/Model\/Person.php<\/li><li>Controller class: \u201cPeopleController\u201d, found at\r\n\/app\/Controller\/PeopleController.php<\/li><li>View template, found at \/app\/View\/People\/index.ctp<\/li><\/ul>\r\n<p>Using these conventions, CakePHP knows that a request to\r\n<a class=\"reference external\" href=\"http:\/\/example.com\/people\/\">http:\/\/example.com\/people\/<\/a> maps to a call on the index() function\r\nof the PeopleController, where the Person model is automatically\r\navailable (and automatically tied to the \u2018people\u2019 table in the\r\ndatabase), and renders to a file. None of these relationships have\r\nbeen configured by any means other than by creating classes and\r\nfiles that you\u2019d need to create anyway.<\/p>\r\n<p>Now that you\u2019ve been introduced to CakePHP\u2019s fundamentals, you\r\nmight try a run through the\r\n<a class=\"reference internal\" href=\"http:\/\/book.cakephp.org\/2.0\/en\/tutorials-and-examples\/blog\/blog.html\"><em>Blog Tutorial<\/em><\/a> to see how things fit\r\ntogether.<\/p><\/div><\/div><\/div><\/div><\/div>CakePHP Conventions<\/div><div id=\"nav-modal\" class=\"reveal-modal\"> <\/div>\r\n\r\n\r\n  \r\n","section_id":null,"is_publish":null},{"id":"67","created_by":"1","modified_by":"1","created":"2013-07-11 21:56:10","modified":"2013-07-11 21:59:34","deleted":"1","revision":null,"flags":null,"owned_by":"1","title":"Test topic","note":"","section_id":null,"is_publish":null},{"id":"68","created_by":"1","modified_by":"1","created":"2013-07-11 21:56:20","modified":"2013-07-11 21:59:34","deleted":"1","revision":null,"flags":null,"owned_by":"1","title":"Test topic 2","note":"","section_id":null,"is_publish":null}]