<?php

/**
 * Contain all framework level configuration defauls
 *
 * @author Tushar Takkar<ttakkar@primarymodules.com>
 
$configuration = array();
 *
 * If true then system will generate php level debugging messages.
 *
$configuration['debug'] = false;
 *
 * If true then system will generate javascript level debugging and push them to firebug console if supported by browser. 
 *
$configuration['debug_js'] = false;
 *
 * If true then system will cache and read metadata/data from cache.
 *
$configuration['cache'] = true;
 *
 * If true then system will use .po file for generating label translation else will use php arrays in language files.
 * Po based localisation uses binary files, but it need to restart apache once modified.
 *
$configuration['po'] = false;
 *
 * All pages generated by maax will use this as html <title>
 *
$configuration['document_title'] = 'MaaxFrame';
 *
 * Max time for which session will remain active. This time is in minutes.
 *
$configuration['sessionTimeout'] = 100;
 *
 * Skin to be use in case none specified by user preferences.
 *
$configuration['skin'] = '3_panel_fieldset_view';
 *
 * Theme to be use in case none specified by user preferences.
 *
$configuration['theme'] = 'redmond';
 *
 * Messages with following logging levels to be logged by logger "root"
 *
$configuration['loggers']['root'] = FATAL + ERROR + WARN + INFO + DEBUG;
 *
 * Enable / Disable Logger 
 *
$configuration['log'] = false; //true/false;
 *
 * Model to log all SQL's/Messages to persistance storage. 
 *
$configuration['event_log_model'] = '\\module\\logging\\model\\event_log';
 *
 * Parameters for javascript environment. 
 * "popup_width_percent" will control maximum width of popup width.
 *
$configuration['js'] = array('popup_width_percent' => 90, 'popup_height_percent' => 70);
 *
 * Its acts like help information, will be displayed on login page.
 *
$configuration['login_information'] = '';
'
                                    <li class="org-level-1"> John Smith, CEO (id: jsmith / pass: cruisebig)</li>
                                    <li class="org-level-2"> Christian Warford, Executive Secretory (id: cwarford / pass: cruisebig)</li>
                                    <li class="org-level-3"> Earnestine Tutor, Vice President, Production (id: etutor / pass: cruisebig)</li>
                                    <li class="org-level-4"> Dollie Delucca, Production Manager (id: ddelucca / pass: cruisebig)</li>
                                    <li class="org-level-5"> Esmeralda Moench, Production Team Member (id: emoench / pass: cruisebig)</li>
                                    <li class="org-level-3"> Michael James, Vice President, Sales (id: mjames / pass: cruisebig)</li>
                                    <li class="org-level-4"> Charles Henry, Sales Manager (id: chenry / pass: cruisebig)</li>
                                    <li class="org-level-5"> Tim Lee, Sales Representative (id: timlee / pass: cruisebig)</li>
                                    <li class="org-level-5"> Linda Smith, Sales Representative (id: lsmith / pass: cruisebig)</li>
                                    <li class="org-level-3"> Julio Opper, Vice President, Marketing (id: jopper / pass: cruisebig)</li>
                                    <li class="org-level-4"> Darryl Grandstaff, Public & Community Relations (id: dgrandstaff / pass: cruisebig)</li>
                                    <li class="org-level-4"> Katy Rolando, Public & Community Relations (id: krolando / pass: cruisebig)</li>
                                    <li class="org-level-4"> Max Yelton, Product & Services Marketing (id: myelton / pass: cruisebig)</li>
                                    <li class="org-level-4"> Lance Brantner, Product & Services Marketing (id: lbrantner/pass :cruisebig)</li>
                                    ';

 *
 * All users under "login_information" can signin using "login_password"
 *
$configuration['login_password'] = 'password';

 *
 * In data acl creator has access to record. 
 * If this flag is set to 1 then creator will always get access, every time record is updated.
 * If this flag is set to 0 then creator will be given access only during create operation. 
 * If creator loses access later then it wont be restored back automatically. 
 *
$configuration['creator_data_acl_access'] = 1; // 1: set always , 0 : set only during create.  

 *
 * If set to true then on click of view record will open a form view. 
 *
$configuration['inline_select_record'] = true;
 *
 * The class name to be used for highlighting search criteia.
 *
$configuration['search_criteria_css_class'] = 'ui-state-active';
 *
 * Pagination parameters used to control mobile views.
 *
$configuration['mobile'] = array('pagination' => array());
 *
 * If 'pfooter' is set 1 then view footer will be shown.
 *
$configuration['mobile']['pagination']['pfooter'] = 1;
 *
 * If 'pheader' is set 1 then view header will be shown.
 *
$configuration['mobile']['pagination']['pheader'] = 0;
 *
 * If 'showCountMessage' is set to 1 then message showing number of records will be shown.
 *
$configuration['mobile']['pagination']['showCountMessage'] = 0;
 *
 * If 'hideIfOnePage' is set to 1 then pagination bar will be hidden total number of pages are 1.
 *
$configuration['mobile']['pagination']['hideIfOnePage'] = 1;
 *
 * Jquery mobile css calss to be used to paint header.
 *
$configuration['mobile']['pagination']['header_row_theme'] = ''; // 'c';

 *
 * Model class used for managing views CRUD operation.
 *
$configuration['listview_model_class'] = '\\module\\core\\model\\listviews';

 *
 * Model class used for managing views CRUD operation.
 *
$configuration['global_configuration_model_class'] = '\\module\\administration\\model\\global_configurations';

$configuration['default_related_listview_name'] = 'All';
 *
 * Model Class used for managing forms CRUD operation.
 *
$configuration['formview_model_class'] = '\\module\\development_base\\model\\forms';

 *
 * Model Class used to record action history, debug logging.
 *
$configuration['action_history_model_class'] = ''; //'\\module\\logging\\model\\action_history';
 *
 * System admin email.
 *
$configuration['administrator_email'] = 'admin@admin.com';
 *
 * System admin phone number
 *
$configuration['administrator_phone_number'] = '777777777';
 *
 * 
 *
$configuration['web'] = array('pagination' => array());
 *
 * If 'pfooter' is set 1 then view footer will be shown.
 *
$configuration['web']['pagination']['pfooter'] = 1;
 *
 * If 'pheader' is set 1 then view footer will be shown.
 *
$configuration['web']['pagination']['pheader'] = 0;
 *
 * If 'showCountMessage' is set to 1 then message showing number of records will be shown.
 *
$configuration['web']['pagination']['showCountMessage'] = 1;
 *
 * If 'hideIfOnePage' is set to 1 then pagination bar will be hidden total number of pages are 1.
 *
$configuration['web']['pagination']['hidePaginationIfOnePage'] = 0;
 *
 * String format used to display label for left to right rendered values.
 *
$configuration['web']['pagination']['ltrFormat'] = '{{LABEL}} {{SORT}} {{SEARCH}}';
 *
 * Data types for rendering right to left value.
 *
$configuration['web']['pagination']['rtlTypes'] = array('NEWDECIMAL');
 *
 * String format used to display label for right to left rendered values.
 *
$configuration['web']['pagination']['rtlFormat'] = '{{SEARCH}} {{SORT}} {{LABEL}}';
 *
 * If 'popup_view_record' is set then onclick of view record, a popup form will open details.
 *
$configuration['popup_view_record'] = 1;
 *
 * If 'readOnlyButtons' is true then read only buttons will be shown or else they will be hidden. 
 *
$configuration['readOnlyButtons'] = false;
 *
 * Will control how caches are managed.
 *
$configuration['cacheSettings'] = array('driver' => 'file');
 *
 * Action used for managing signin
 *
$configuration['authAction'] = 'access_controls/users/login';
 *
 * Action to be performed when none specified.
 *
$configuration['defaultModuleControllerAction'] = 'core/dashboard/?request_url=dashboards/widgets/dashboard/filter:Home';
 *
 * Action to be performed when none specified for mobile view.
 *
$configuration['defaultModuleControllerActionMobile'] = 'development_base/menus/app_menu';
 *
 * Extenstion of license file.
 *
$configuration['licenseExtension'] = 'ml';
 *
 * Default controller action to be performed when none specified.
 *
$configuration['defaultAction'] = 'index';
 *
 * Default system time zone.
 *
$configuration['systemTimeZone'] = 'UTC';
 *
 * Default user time sone when none specified.
 *
$configuration['userTimeZone'] = 'America/Havana';
 *
 * Default locale to be use when none specified.
 *
$configuration['locale'] = 'en_US';
 *
 * Locale suffix if any.
 *
$configuration['localeSuffix'] = 'utf8';
 *
 * If set to true then locale will be detected from user browser setting.
 *
$configuration['browserLocale'] = false; // true/false ; if session locale is not present then read from browser.
 *
 * Single url or array of users to be used for rendering static content.
 *
$configuration['staticURL'] = '';
 *
 * Google API key to be used for translating string.
 *
$configuration['google_translate_key'] = 'AIzaSyAN4NaUPmJtZ2033WZmoDZ-9SJnmWl2lt4';

 *
 * URL for google api service.
 *
$configuration['googleapis'] = 'https://www.googleapis.com/language/translate/v2';




 *
 * View helper for system wide view rendering.
 *
$configuration['presentation'] = array('DATETIME' => array(
        '\\module\\core\\helper\\presentation\\preety_datetime::format'
    )
);
 *
 * Types of data views supported by maax.
 *
$configuration['render_as_list'] = array(
    array('type' => 'list-detail', 'text' => 'Simple List View', 'value' => 'index')
    , array('type' => 'list-detail', 'text' => 'Tree', 'value' => 'tree')
    , array('type' => 'list-detail', 'text' => 'Categorized', 'value' => 'categorized')
    , array('type' => 'crosstab-detail', 'text' => 'Crosstab / Matrix', 'value' => 'crosstab')
);
 *
 * Aggegators to be used in SQLS.
 *
$configuration['aggregators'] = array(
    array('text' => 'SUM', 'value' => 'SUM')
    , array('text' => 'MIN', 'value' => 'MIN')
    , array('text' => 'MAX', 'value' => 'MAX')
    , array('text' => 'AVG', 'value' => 'AVG')
    , array('text' => 'COUNT', 'value' => 'COUNT')
);
 *
 * Possible different rendering of column data.
 *
$configuration['column_render_as'] = array(
    array('text' => 'Category', 'value' => 'category'),
    array('text' => 'Info', 'value' => 'info'),
    array('text' => 'Summary', 'value' => 'summary')
);
 *
 * Possible different comparators in SQL.
 *
$configuration['search_comparators'] = array(
    array('text' => 'Equal', 'value' => '=')
    , array('text' => 'Not Equal', 'value' => '<>')
    , array('text' => 'Starts With', 'value' => 'LIKE')
    , array('text' => 'Not Starts With', 'value' => 'NOT LIKE')
    , array('text' => 'Contains', 'value' => 'CONTAINS')
    , array('text' => 'Not Contains', 'value' => 'NOT CONTAINS')
    , array('text' => 'Less Than', 'value' => '<')
    , array('text' => 'Less Than Equal', 'value' => '<=')
    , array('text' => 'Greater Than', 'value' => '>')
    , array('text' => 'Greater Than Equal', 'value' => '>=')
    , array('text' => 'Between', 'value' => 'between')
    , array('text' => 'In Subquery', 'value' => 'IN SUBQUERY')
    , array('text' => 'Not In Subquery', 'value' => 'NOT IN SUBQUERY')
);
 *
 * Possible join operators in SQL wheres.
 *
$configuration['sql_logical_operators'] = array(
    array('text' => 'AND', 'value' => 'AND'),
    array('text' => 'OR', 'value' => 'OR'),
    array('text' => 'AND(', 'value' => 'AND('),
    array('text' => 'OR(', 'value' => 'OR('),
    array('text' => ')AND(', 'value' => ')AND('),
    array('text' => ')OR(', 'value' => ')OR('),
    array('text' => ')', 'value' => ')'),
);
 *
 * Security salt used for generating stronger password hashses.
 *
$configuration['securitySalt'] = '';

 *
 * Number of tags to be show in tag widget.
 *
$configuration['showMaxTags'] = 50;
 *
 * @todo : Whats difference between tag and entity tags config.
 *
$configuration['showMaxEntityTags'] = 30;
 *
 * Number of records to be shown per mobile view page.
 *
$configuration['limitMobile'] = 25;
 *
 * Number of records to be shown per page in web view
 *
$configuration['rowsPerPage'] = 25;
 *
 * Failsafe in place to restrict number of records to be fetched in abscence of limit clause.
 *
$configuration['globalMaxRows'] = 1000;
 *
 * Reserved keywords used by php and system.
 *
$configuration['reserved_word'] = array('abstract', 'and', 'array', 'as', 'break', 'case', 'catch', 'cfunction', 'class', 'clone', 'const', '
continue', 'declare', 'default', 'do', 'else', 'elseif', 'enddeclare', 'endfor', 'endforeach', 'endif', 'endswitch', '
endwhile', 'extends', 'final', 'for', 'foreach', 'function', 'global', 'goto', 'if', 'implements', 'interface', 'instanceof', 'namespace'
    , 'new', 'old_function', 'or', 'private', 'protected', 'public', 'static', 'switch', 'throw', 'try', 'use', 'var', 'while', 'xor', '
die', 'echo', 'empty', 'exit', 'eval', 'include', 'include_once', 'isset', 'list', 'require', 'require_once', '
return', 'print', 'unset', '__halt_compiler');


 *
 * Default mode of fetch view data.
 *
$configuration['model_paginate_as'] = 'normal'; // inherit/lazy/normal
 *
 * Session storage mechanism.
 *
$configuration['storageType'] = 'file'; // file/database
//$configuration['controllerActions'] = array('calculator' => array('class' => 'calculator'));

 *
 *  date formats compatible with jquery.
 *
$configuration['dateFormats'] = array(
    'en' => 'MM/dd/yyyy',
    'af' => 'dd/MM/yyyy',
    'ar-DZ' => 'dd/MM/yyyy',
    'ar' => 'dd/MM/yyyy',
    'az' => 'dd.MM.yyyy',
    'bg' => 'dd.MM.yyyy',
    'bs' => 'dd.MM.yyyy',
    'ca' => 'dd/MM/yyyy',
    'cs' => 'dd.MM.yyyy',
    'da' => 'dd-MM-yyyy',
    'de' => 'dd.MM.yyyy',
    'el' => 'dd/MM/yyyy',
    'en-AU' => 'dd/MM/yyyy',
    'en-GB' => 'dd/MM/yyyy',
    'en-NZ' => 'dd/MM/yyyy',
    'eo' => 'dd/MM/yyyy',
    'es' => 'dd/MM/yyyy',
    'et' => 'dd.MM.yyyy',
    'eu' => 'yyyy/MM/dd',
    'fa' => 'yyyy/MM/dd',
    'fi' => 'dd.MM.yyyy',
    'fo' => 'dd-MM-yyyy',
    'fr-CH' => 'dd.MM.yyyy',
    'fr' => 'dd/MM/yyyy',
    'gl' => 'dd/MM/yyyy',
    'he' => 'dd/MM/yyyy',
    'hr' => 'dd.MM.yyyy.',
    'hu' => 'yyyy-MM-dd',
    'hy' => 'dd.MM.yyyy',
    'id' => 'dd/MM/yyyy',
    'is' => 'dd/MM/yyyy',
    'it' => 'dd/MM/yyyy',
    'ja' => 'yyyy/MM/dd',
    'ko' => 'yyyy-MM-dd',
    'kz' => 'dd.MM.yyyy',
    'lt' => 'yyyy-MM-dd',
    'lv' => 'dd-MM-yyyy',
    'ml' => 'dd/MM/yyyy',
    'ms' => 'dd/MM/yyyy',
    'nl' => 'dd/MM/yyyy',
    'no' => 'dd.MM.yyyy',
    'pl' => 'dd.MM.yyyy',
    'pt-BR' => 'dd/MM/yyyy',
    'pt' => 'dd/MM/yyyy',
    'rm' => 'dd/MM/yyyy',
    'ro' => 'dd.MM.yyyy',
    'ru' => 'dd.MM.yyyy',
    'sk' => 'dd.MM.yyyy',
    'sl' => 'dd.MM.yyyy',
    'sq' => 'dd.MM.yyyy',
    'sr-SR' => 'dd/MM/yyyy',
    'sr' => 'dd/MM/yyyy',
    'sv' => 'yyyy-MM-dd',
    'ta' => 'dd/MM/yyyy',
    'th' => 'dd/MM/yyyy',
    'tr' => 'dd.MM.yyyy',
    'uk' => 'dd/MM/yyyy',
    'vi' => 'dd/MM/yyyy',
    'zh-CN' => 'yyyy-MM-dd',
    'zh-HK' => 'dd-MM-yyyy',
    'zh-TW' => 'yyyy/MM/dd',
);
 *
 * Possible locales supported by system.
 *
$configuration['localeList'] = array(
    'sq_AL' => 'Albanian (Albania)',
    'sq' => 'Albanian',
    'ar_DZ' => 'Arabic (Algeria)',
    'ar_BH' => 'Arabic (Bahrain)',
    'ar_EG' => 'Arabic (Egypt)',
    'ar_IQ' => 'Arabic (Iraq)',
    'ar_JO' => 'Arabic (Jordan)',
    'ar_KW' => 'Arabic (Kuwait)',
    'ar_LB' => 'Arabic (Lebanon)',
    'ar_LY' => 'Arabic (Libya)',
    'ar_MA' => 'Arabic (Morocco)',
    'ar_OM' => 'Arabic (Oman)',
    'ar_QA' => 'Arabic (Qatar)',
    'ar_SA' => 'Arabic (Saudi Arabia)',
    'ar_SD' => 'Arabic (Sudan)',
    'ar_SY' => 'Arabic (Syria)',
    'ar_TN' => 'Arabic (Tunisia)',
    'ar_AE' => 'Arabic (United Arab Emirates)',
    'ar_YE' => 'Arabic (Yemen)',
    'ar' => 'Arabic',
    'be_BY' => 'Belarusian (Belarus)',
    'be' => 'Belarusian',
    'bg_BG' => 'Bulgarian (Bulgaria)',
    'bg' => 'Bulgarian',
    'ca_ES' => 'Catalan (Spain)',
    'ca' => 'Catalan',
    'zh_CN' => 'Chinese (China)',
    'zh_HK' => 'Chinese (Hong Kong)',
    'zh_SG' => 'Chinese (Singapore)',
    'zh_TW' => 'Chinese (Taiwan)',
    'zh' => 'Chinese',
    'hr_HR' => 'Croatian (Croatia)',
    'hr' => 'Croatian',
    'cs_CZ' => 'Czech (Czech Republic)',
    'cs' => 'Czech',
    'da_DK' => 'Danish (Denmark)',
    'da' => 'Danish',
    'nl_BE' => 'Dutch (Belgium)',
    'nl_NL' => 'Dutch (Netherlands)',
    'nl' => 'Dutch',
    'en_AU' => 'English (Australia)',
    'en_CA' => 'English (Canada)',
    'en_IN' => 'English (India)',
    'en_IE' => 'English (Ireland)',
    'en_MT' => 'English (Malta)',
    'en_NZ' => 'English (New Zealand)',
    'en_PH' => 'English (Philippines)',
    'en_SG' => 'English (Singapore)',
    'en_ZA' => 'English (South Africa)',
    'en_GB' => 'English (United Kingdom)',
    'en_US' => 'English (United States)',
    'en' => 'English',
    'et_EE' => 'Estonian (Estonia)',
    'et' => 'Estonian',
    'fi_FI' => 'Finnish (Finland)',
    'fi' => 'Finnish',
    'fr_BE' => 'French (Belgium)',
    'fr_CA' => 'French (Canada)',
    'fr_FR' => 'French (France)',
    'fr_LU' => 'French (Luxembourg)',
    'fr_CH' => 'French (Switzerland)',
    'fr' => 'French',
    'de_AT' => 'German (Austria)',
    'de_DE' => 'German (Germany)',
    'de_LU' => 'German (Luxembourg)',
    'de_CH' => 'German (Switzerland)',
    'de' => 'German',
    'el_CY' => 'Greek (Cyprus)',
    'el_GR' => 'Greek (Greece)',
    'el' => 'Greek',
    'iw_IL' => 'Hebrew (Israel)',
    'iw' => 'Hebrew',
    'hi_IN' => 'Hindi (India)',
    'hu_HU' => 'Hungarian (Hungary)',
    'hu' => 'Hungarian',
    'is_IS' => 'Icelandic (Iceland)',
    'is' => 'Icelandic',
    'in_ID' => 'Indonesian (Indonesia)',
    'in' => 'Indonesian',
    'ga_IE' => 'Irish (Ireland)',
    'ga' => 'Irish',
    'it_IT' => 'Italian (Italy)',
    'it_CH' => 'Italian (Switzerland)',
    'it' => 'Italian',
    'ja_JP' => 'Japanese (Japan)',
    'ja_JP_JP' => 'Japanese (Japan,JP)',
    'ja' => 'Japanese',
    'ko_KR' => 'Korean (South Korea)',
    'ko' => 'Korean',
    'lv_LV' => 'Latvian (Latvia)',
    'lv' => 'Latvian',
    'lt_LT' => 'Lithuanian (Lithuania)',
    'lt' => 'Lithuanian',
    'mk_MK' => 'Macedonian (Macedonia)',
    'mk' => 'Macedonian',
    'ms_MY' => 'Malay (Malaysia)',
    'ms' => 'Malay',
    'mt_MT' => 'Maltese (Malta)',
    'mt' => 'Maltese',
    'no_NO' => 'Norwegian (Norway)',
    'no_NO_NY' => 'Norwegian (Norway,Nynorsk)',
    'no' => 'Norwegian',
    'pl_PL' => 'Polish (Poland)',
    'pl' => 'Polish',
    'pt_BR' => 'Portuguese (Brazil)',
    'pt_PT' => 'Portuguese (Portugal)',
    'pt' => 'Portuguese',
    'ro_RO' => 'Romanian (Romania)',
    'ro' => 'Romanian',
    'ru_RU' => 'Russian (Russia)',
    'ru' => 'Russian',
    'sr_BA' => 'Serbian (Bosnia and Herzegovina)',
    'sr_ME' => 'Serbian (Montenegro)',
    'sr_CS' => 'Serbian (Serbia and Montenegro)',
    'sr_RS' => 'Serbian (Serbia)',
    'sr' => 'Serbian',
    'sk_SK' => 'Slovak (Slovakia)',
    'sk' => 'Slovak',
    'sl_SI' => 'Slovenian (Slovenia)',
    'sl' => 'Slovenian',
    'es_AR' => 'Spanish (Argentina)',
    'es_BO' => 'Spanish (Bolivia)',
    'es_CL' => 'Spanish (Chile)',
    'es_CO' => 'Spanish (Colombia)',
    'es_CR' => 'Spanish (Costa Rica)',
    'es_DO' => 'Spanish (Dominican Republic)',
    'es_EC' => 'Spanish (Ecuador)',
    'es_SV' => 'Spanish (El Salvador)',
    'es_GT' => 'Spanish (Guatemala)',
    'es_HN' => 'Spanish (Honduras)',
    'es_MX' => 'Spanish (Mexico)',
    'es_NI' => 'Spanish (Nicaragua)',
    'es_PA' => 'Spanish (Panama)',
    'es_PY' => 'Spanish (Paraguay)',
    'es_PE' => 'Spanish (Peru)',
    'es_PR' => 'Spanish (Puerto Rico)',
    'es_ES' => 'Spanish (Spain)',
    'es_US' => 'Spanish (United States)',
    'es_UY' => 'Spanish (Uruguay)',
    'es_VE' => 'Spanish (Venezuela)',
    'es' => 'Spanish',
    'sv_SE' => 'Swedish (Sweden)',
    'sv' => 'Swedish',
    'th_TH' => 'Thai (Thailand)',
    'th_TH_TH' => 'Thai (Thailand,TH)',
    'th' => 'Thai',
    'tr_TR' => 'Turkish (Turkey)',
    'tr' => 'Turkish',
    'uk_UA' => 'Ukrainian (Ukraine)',
    'uk' => 'Ukrainian',
    'vi_VN' => 'Vietnamese (Vietnam)',
    'vi' => 'Vietnamese',
);
 *
 * If set then all has many associations whose list-view not explicitely injected in form will be automatically build.
 *
$configuration['generate_related_information_list'] = 1;
 *
 * All application level this models will be ignored while building list-view.
 *
$configuration['ignore_related_model_list'] = array('unread_records', 'task_related_to');
 *
 * The list-view will be injected under tab-container with following name.
 *
$configuration['related_information_container'] = 'Related Information';
 *
 * The auto injected list-views will have following attributes.
 *
$configuration['related_view_properties'] = array(
    'helper' => '\\kernel\\form'
    , 'method' => 'listview'
    , 'action' => 'index'
    , 'load_menu' => '1'
    , 'pfooter' => '1'
    , 'auto_load' => '0'
    , 'pheader' => '0'
    , 'show_collapsed' => 1
    , 'show_in_draft_mode' => '1'
    , 'generated_related_model_view' => 1
    , 'hide_listview_link' => 1
);
 *
 * Maax module listing site like uat.maaxframe.com
 *
$configuration['repository_url'] = array('http://localhost/trunk014/app1');
 *
 * Your svn username/password to repository as per listed in module manifest file.
 * You can see it on module form view.
 *
$configuration['svn_auth_username'] = '';
$configuration['svn_auth_password'] = '';

 *
 * Models whose data to be package along with module.
 *
$configuration['package_model_list'] = array('\\module\\brules\\model\\business_rules');
$configuration['package_model_list'] = array();
 *
 * If request contain reference to any of following string then it will be considered as request from mobile device.
 *
$configuration['regex_mobile_devices'] = "/(nokia|iphone|android|motorola|^mot-|softbank|foma|docomo|kddi|up.browser|up.link|htc|"
        . "dopod|blazer|netfront|helio|hosin|huawei|novarra|CoolPad|webos|techfaith|palmsource"
        . "|blackberry|alcatel|amoi|ktouch|nexian|samsung|^sam-|s[cg]h|^lge|ericsson|philips|sagem|"
        . "wellcom|bunjalloo|maui|symbian|smartphone|midp|wap|phone|windows ce|iemobile|^spice|^bird|^zte-|"
        . "longcos|pantech|gionee|^sie-|portalmmm|jigs browser|hiptop|^ucweb|^benq|haier|^lct|operas*mobi|"
        . "opera*mini|320x320|240x320|176x220)/i";

*/